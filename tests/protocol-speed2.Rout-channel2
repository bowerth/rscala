
R Under development (unstable) (2017-08-27 r73146) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> heap.maximum <- "32G"
> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-08-27 r73146) # ramah # FALSE # TRUE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.3.5-518
Date:                 2017-09-20
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.10)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.10.x, 2.11.x,
                      and 2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-09-20 15:16:21 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Built:                R 3.5.0; ; 2017-09-20 15:16:21 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaSettings           Settings of the Scala Interpreter
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/home/dahl/local/R/devel/lib/R/library/rscala/doc’:

article: Integration of R and Scala Using rscala (source)

> 
> func0a <- function(x=matrix(0.0,nrow=100000,ncol=300)) {  # 228 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=200000,ncol=300)) {  # 228 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=2000,ncol=300)) {  # 2.28 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(60000000)) {  # 228 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(600000)) {  # 2.28 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(60000000)) {  # 228 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 228 MB
+   s %!% 'new Array[Int](60000000)'
+ }
> 
> 
> s$a <- 1:60000000
> invisible(s$a)
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:60000000,
+   s$a,
+   times=5)
Unit: milliseconds
           expr         min         lq       mean     median         uq
       func0a()  8123.46037  8507.7391  8692.5372  8612.5589  8867.3842
       func1a() 11630.53626 12375.3093 12809.9200 12472.5296 13204.1345
       func1b()   180.07662   197.4985   551.0233   200.7612   210.8111
       func2a()  2994.08663  3241.9391  3428.8775  3255.3474  3364.1531
       func2b()    98.17934   100.6557   317.9253   106.2574   131.6174
       func3a()   782.70204   951.7725  1584.3047  1507.8539  2019.5937
       func4a()  2615.84929  2739.9086  3133.9794  2851.2872  3549.0463
 s$a <- 1:6e+07   680.39252   712.2622   775.1384   747.7725   771.2518
            s$a  2055.23211  2449.6572  2508.9925  2551.3072  2735.1163
       max neval
  9351.543     5
 14367.090     5
  1965.969     5
  4288.861     5
  1152.916     5
  2659.602     5
  3913.806     5
   964.013     5
  2753.650     5
> 
> 
> proc.time()
   user  system elapsed 
 30.268   6.016 192.516 
