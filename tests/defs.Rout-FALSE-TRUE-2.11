> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # FALSE # TRUE
> 
> 
> ####
> 
> 
> rng1 <- s %.~% "new scala.util.Random"
> rng1$nextDouble()
[1] 0.02218687
> 
> s$r1 <- rng1
> rng2 <- s$r1
> rng2$nextDouble()
[1] 0.9881215
> 
> rng3 <- s$.scala.util.Random$new()
> rng3$nextDouble()
[1] 0.008816831
> 
> s$r3 <- rng3
> rng4 <- s$r3
> rng4$nextDouble()
[1] 0.9378438
> 
> f <- rng4$nextDouble(.EVALUATE=FALSE)
> f()
[1] 0.5393886
> 
> 
> ####
> 
> 
> see <- "David"
> mkFunc1 <- function() {
+   see <- "B."
+   x <- "Milly"
+   print(environment())
+   r <- function(x1="Mack",x2="Bob") s %!% '
+     x1+" "+x2+" "+R.getS0("see")
+   '
+   r
+ }
> y1 <- mkFunc1()
<environment: 0x3489438>
> identical(y1("Lisa","Dahl"),"Lisa Dahl B.")
[1] TRUE
> 
> 
> mkFunc2 <- function() {
+   see <- "MMMM."
+   x <- "Milly"
+   r <- function(x="Mack",y="Bob") s %.!% '
+       x+" "+y+" "+R.getS0("see")
+   '
+   r
+ }
> y2 <- mkFunc2()
> identical(y2("Lisa","Dahl")$toString(),"Lisa Dahl MMMM.")
[1] TRUE
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 349710 18.7     592000 31.7   460000 24.6
Vcells 639758  4.9    1231260  9.4  1041788  8.0
> 
> 
> 
> func1 <- function() {
+   see <- "Knudsen"
+   y1("Lisa","Dahl")
+ }
> identical(func1(),"Lisa Dahl B.")
[1] TRUE
> 
> 
> ####
> 
> 
> # Realistic timing
> system.time({
+   e <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+   scalaOptimize(e)
+ })
   user  system elapsed 
  0.004   0.000   0.389 
> 
> # Taking advantage of caching
> system.time({
+   f <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+   scalaOptimize(f)
+ })
   user  system elapsed 
  0.004   0.000   0.001 
> 
> ####
> 
> nextDouble <- function(rng=s$null("scala.util.Random")) s %!% "rng.nextDouble()"
> 
> mkRNG1 <- function() s %.!% 'new scala.util.Random()'
> mkRNG2 <- function() s %.~% 'new scala.util.Random()'
> 
> rng1 <- mkRNG1()
> rng2 <- mkRNG2()
> 
> rng1$nextInt(10L)
[1] 1
> rng2$nextInt(10L)
[1] 3
> 
> str <- rng1$toString(.AS.REFERENCE=TRUE)
> str$length()
[1] 26
> 
> nd0 <- rng1$nextDouble(.EVALUATE=FALSE)
> nd1 <- function() s %!% 'R.cached("@{toString(rng1)}").asInstanceOf[@{rng1[[\'type\']]}].nextDouble()'
> nd1b <- scalaOptimize(nd1)
> nd2 <- function() s %!% '@{rng2}.nextDouble()'
> nd2b <- scalaOptimize(nd2)
> 
> library("microbenchmark")
> 
> microbenchmark(
+   runif(1),
+   rng1$nextDouble(),
+   rng2$nextDouble(),
+   nd0(),
+   nd1(),
+   nd1b(),
+   nd2(),
+   nd2b(),
+   times=500
+ )
Unit: microseconds
              expr      min        lq       mean    median        uq
          runif(1)    1.575   10.1725   14.37649   15.3470   18.2155
 rng1$nextDouble() 1326.007 2387.1520 3436.90545 2573.4250 2717.6265
 rng2$nextDouble() 1246.946 2192.8355 5172.80425 2416.7855 2554.8810
             nd0()  211.519  459.7995  788.32538  512.3885  547.7235
             nd1() 1215.845 2265.1595 3161.84405 2425.4925 2566.1180
            nd1b()  195.308  474.0760  629.80259  518.0185  557.7530
             nd2() 1160.873 2117.7705 2741.51037 2266.1710 2402.5965
            nd2b()  235.090  463.3545  728.93687  507.2735  546.1145
         max neval
     123.882   500
   89432.757   500
 1056884.144   500
   84560.714   500
  103430.278   500
   16956.210   500
   29624.951   500
   15670.034   500
> 
> ####
> 
> f <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %!% '2*x'
+ }
> 
> f(4)
[1] 8
> tryCatch(f(-3), error=function(e) e)
<simpleError in f(-3): 'x' must be positive>
> f(0)
[1] 20
> 
> g <- scalaOptimize(f)
> g(4)
[1] 8
> g(-3)     ## Note that no error because R code as been optimized away!
[1] -6
> g(0)      ## And we don't get the special case when x==0.
[1] 0
> 
> h <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %~% '2*R.getD0("x")'
+ }
> 
> h(4)
[1] 8
> tryCatch(h(-3), error=function(e) e)
<simpleError in h(-3): 'x' must be positive>
> h(0)
[1] 20
> 
> microbenchmark(
+   f(4),
+   g(4),
+   h(4),        # h is *slow* and it has the memory leak inherent in Scala's REPL.
+   times=100)
Unit: microseconds
 expr       min         lq       mean     median          uq       max neval
 f(4)  1243.423   2361.429   3453.503   2471.392   2625.7295  45034.58   100
 g(4)   284.832    639.609   1218.386    721.740    839.6685  16185.30   100
 h(4) 72170.526 111790.708 185448.204 158990.598 249605.2620 511497.70   100
> 
> microbenchmark(
+   f(4),        
+   g(4),        # g is faster, but you lose the checking and special behavior.
+   times=1000)
Unit: microseconds
 expr      min        lq     mean    median       uq       max neval
 f(4) 1299.560 2264.9705 3486.525 2395.5950 2552.077  59478.85  1000
 g(4)  287.361  633.8005 1146.703  685.2365  752.436 106848.28  1000
> 
> 
> 
> 
> ####
> 
> s$.scala.util.Random$nextDouble()
[1] 0.5517161
> m <- s$.scala.util.Random$new(342L,.EVALUATE=FALSE)
> m(23436)$nextDouble()
[1] 0.8011135
> m(63502)$nextDouble()
[1] 0.1435077
> m(93222)$nextDouble()
[1] 0.4889048
> m(93222)$nextDouble()
[1] 0.4889048
> 
> n <- m(5)$nextDouble(.EVALUATE=FALSE)
> n()
[1] 0.7305199
> n()
[1] 0.08825841
> n()
[1] 0.4889045
> 
> s$'.Array[Int]'$new(5L)
[1] 0 0 0 0 0
> 
> ####
> 
> s$a <- 1:10
> a <- s$.a
> a$apply(3L)
[1] 4
> 
> s$.scala.util.Random$nextDouble()
[1] 0.1140876
> s$.scala.util.Random$nextDouble()
[1] 0.7861441
> 
> s %@% 'import scala.util.Random'
> s$.Random$nextDouble()
[1] 0.1630764
> 
> a <- function() s %!% 'Random.nextDouble'
> a()
[1] 0.6308129
> 
> a <- s$.scala.util.Random
> a$nextDouble()
[1] 0.48274
> 
> b <- ( function() s %!% 'scala.util.Random' )()
> b$nextDouble()
[1] 0.1565817
> 
> microbenchmark(
+   a$nextDouble(),
+   b$nextDouble(),
+   times=1000
+   )
Unit: milliseconds
           expr      min       lq     mean   median       uq      max neval
 a$nextDouble() 1.097416 1.241334 2.313518 1.359609 2.269255 82.17600  1000
 b$nextDouble() 1.163163 1.308509 2.152559 1.425286 2.432632 25.01122  1000
>   
> 
> ####
> 
> f <- function(x=NULL, wantNull=TRUE) s %.!% '
+   val r = R.getReference(x)
+   if ( wantNull ) null else r
+ '
> 
> a <- f(1:10, FALSE)
> a$name()
[1] "Nn2WpplB"
> 
> g <- function(func=NULL,y=scalaNull("PersistentReference")) s %!% '
+   R.invoke(func,y)
+ '
> 
> g(print, a)
 [1]  1  2  3  4  5  6  7  8  9 10
> 
> 
> ####
> 
> f <- function(x=scalaNull("(Int,Int)")) s %!% 'x._1 + x._2'
> g <- s %~% "(300,400)"
> f(g)
[1] 700
> f(s %.~% "(30,40)")
[1] 70
> 
> f2 <- function() s %~% 'println("Yes")'
> f2()
Yes
> capture.output(f2())
Yes
character(0)
> 
> a <- s %.~% "(300,234)"
> f1 <- function(x=scalaNull("(Int,Int)"),y=numeric()) s %!% 'x._1 + x._2 + y.sum'
> f1(a,c(2,3,4,6))
[1] 549
> 
> f1 <- function(x=scalaNull("(Int,Int)"),y=scalaNull("Array[Double]")) s %!% 'x._1 + x._2 + y.sum'
> b <- s %.~% "Array[Double](2,3,4,5)"
> f1(a,b)
[1] 548
> 
> ####
> 
> (function() s %!% 'println("Yes")')()
Yes
> (function() s %!% '0')()
[1] 0
> (function() s %!% 'null')()
> 
> ####
> 
> tryCatch((function() s %!% 'a+b')(),error = function(e) e)
<console>:18: error: not found: value b
       a+b}
         ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((function() s %!% 'a+')(),error = function(e) e)
<console>:18: error: missing argument list for method + in class any2stringadd
Unapplied methods are only converted to functions when a function type is expected.
You can make this conversion explicit by writing `$plus _` or `$plus(_)` instead of `$plus`.
       a+}
        ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((function() s %!% 'import org.asdfad')(),error = function(e) {e})
<console>:17: error: object asdfad is not a member of package org
       import org.asdfad}
              ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((function() s %!% 'throw new RuntimeException()')(),error = function(e) {e})
java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.server.ScalaServer.doInvoke(ScalaServer.scala:128)
	at org.ddahl.rscala.server.ScalaServer.org$ddahl$rscala$server$ScalaServer$$heart(ScalaServer.scala:512)
	at org.ddahl.rscala.server.ScalaServer.run(ScalaServer.scala:539)
	at org.ddahl.rscala.server.Main$.delayedEndpoint$org$ddahl$rscala$server$Main$1(Main.scala:5)
	at org.ddahl.rscala.server.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.server.Main$.main(Main.scala:3)
	at org.ddahl.rscala.server.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.RuntimeException
	at $line322.$read$$iw$$iw$$anonfun$1.apply(<console>:17)
	at $line322.$read$$iw$$iw$$anonfun$1.apply(<console>:16)
	... 35 more
java.lang.reflect.InvocationTargetException
java.lang.RuntimeException
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Invocation error.>
> s %~% "5+6"   # Everything's still okay!
[1] 11
> 
> 
