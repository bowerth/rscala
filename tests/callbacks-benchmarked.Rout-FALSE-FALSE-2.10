> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     63.277     95.273    576.3765    144.9225     173.996
 doit1(rnorm(10)) 522939.522 790630.372 978114.2403 993435.3805 1105804.561
 doit2(rnorm(10)) 212368.765 302440.009 563231.9253 535922.4570  831974.873
 doit3(rnorm(10))   4111.019   4795.648  10414.9027   5949.5980   13750.575
 doit4(rnorm(10))   2187.188   2355.120  11011.5780   3185.8440    4100.273
         max neval
    4582.892    10
 1527034.874    10
 1149749.546    10
   33185.219    10
   70316.152    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean   median        uq       max
 doit0(rnorm(10))   31.652   70.411  148.0531   94.833  111.6255  39023.96
 doit3(rnorm(10)) 2241.556 3887.284 7583.2353 4250.682 7105.6455 161380.29
 doit4(rnorm(10)) 1159.638 2146.102 4170.9221 2354.953 2596.2835  95224.49
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4176 200.4324 201.4990 200.4340 200.4501  205.7609     5
 doit1(rnorm(10)) 446.7095 595.2187 756.1278 690.8993 707.1187 1340.6927     5
 doit2(rnorm(10)) 353.3381 421.1909 452.5052 438.1465 481.1768  568.6735     5
 doit3(rnorm(10)) 203.7695 203.8807 213.9392 215.5929 216.8592  229.5938     5
 doit4(rnorm(10)) 203.3930 204.4247 209.2694 205.1363 211.3229  222.0701     5
> 
> 
