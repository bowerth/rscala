> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     45.404    107.510    529.2883    130.361    163.902
 doit1(rnorm(10)) 349723.990 552674.575 670442.9219 661518.194 854457.816
 doit2(rnorm(10)) 151428.379 235404.617 347357.0864 269814.736 499630.592
 doit3(rnorm(10))   2462.879   5299.248   8524.7171   6489.287   8672.690
 doit4(rnorm(10))   1354.506   2259.645   4353.6607   3804.907   5424.298
        max neval
   4208.245    10
 937674.463    10
 686387.432    10
  23747.038    10
  12171.434    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq       max
 doit0(rnorm(10))   30.728   62.5485   89.74357   81.1295  105.063  4678.033
 doit3(rnorm(10)) 2172.060 3352.7240 4906.72686 3993.8000 4322.260 97387.107
 doit4(rnorm(10)) 1071.452 1846.2975 2695.28136 2175.6295 2405.669 95622.668
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4045 200.4317 201.2067 200.4361 201.4274  203.3336     5
 doit1(rnorm(10)) 613.1428 647.8083 693.3416 673.6534 698.9034  833.2000     5
 doit2(rnorm(10)) 352.6151 388.0373 571.4764 423.3064 450.6753 1242.7477     5
 doit3(rnorm(10)) 204.4305 204.8185 209.3406 207.4035 212.6257  217.4249     5
 doit4(rnorm(10)) 202.5761 202.9306 206.4065 203.0988 204.7990  218.6282     5
> 
> 
