> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     39.770     76.617    534.6243    137.3265    167.029
 doit1(rnorm(10)) 287301.673 518382.172 614727.1899 641028.4800 703888.647
 doit2(rnorm(10)) 168511.389 229727.225 339958.3446 261801.4340 524854.020
 doit3(rnorm(10))   3750.569   4261.590   4965.1408   4761.1865   5445.214
 doit4(rnorm(10))   1634.512   2018.312   4789.9342   3224.4375   4517.927
        max neval
   4279.446    10
 908550.577    10
 562286.380    10
   6933.665    10
  14040.294    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq      max
 doit0(rnorm(10))   31.553   59.245   91.73722   75.2115  103.707  9470.72
 doit3(rnorm(10)) 2201.364 2793.057 4433.42860 4020.9030 4373.871 90510.35
 doit4(rnorm(10)) 1163.547 1366.178 2606.97781 2149.0960 2424.963 53655.11
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3965 200.3990 200.4626 200.4095 200.4341 200.6739     5
 doit1(rnorm(10)) 536.2665 541.4089 618.8436 591.6109 678.9696 745.9620     5
 doit2(rnorm(10)) 346.8557 394.5927 451.2456 401.6031 431.7427 681.4335     5
 doit3(rnorm(10)) 204.3586 204.3714 205.2262 204.5288 204.9453 207.9271     5
 doit4(rnorm(10)) 202.5846 203.0469 204.4587 203.0682 203.0710 210.5228     5
> 
> 
