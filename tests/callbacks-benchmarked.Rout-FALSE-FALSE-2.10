> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     79.859    106.163    575.4242    150.5305    162.855
 doit1(rnorm(10)) 273987.056 296104.343 585436.7365 589309.5545 771585.933
 doit2(rnorm(10)) 227649.545 260924.246 383698.1374 370047.1440 471126.676
 doit3(rnorm(10))   2485.401   4345.562   6317.8655   4974.5750   6856.367
 doit4(rnorm(10))   1360.700   2275.936   6258.0523   3033.1800   6951.451
        max neval
   4570.747    10
 946094.638    10
 637261.250    10
  18259.111    10
  20188.506    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq      mean   median        uq       max
 doit0(rnorm(10))   30.540   58.9175  120.1984   73.285  102.4195  38916.17
 doit3(rnorm(10)) 2151.825 2851.1845 4603.1171 3917.110 4407.1715  71758.44
 doit4(rnorm(10)) 1097.445 1356.5665 2810.4965 2098.412 2444.7450 123342.56
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3974 200.4098 201.1559 200.4119 200.4203 204.1400     5
 doit1(rnorm(10)) 466.3079 607.9922 689.6604 635.4129 780.2617 958.3275     5
 doit2(rnorm(10)) 427.0481 439.6058 560.7349 465.1322 491.9319 979.9563     5
 doit3(rnorm(10)) 204.5805 204.6271 207.7802 205.0186 205.4766 219.1981     5
 doit4(rnorm(10)) 202.9941 203.4164 206.2257 203.9878 204.1608 216.5697     5
> 
> 
