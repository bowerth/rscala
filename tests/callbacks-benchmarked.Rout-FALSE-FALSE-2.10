> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     58.836    103.621    574.4344    143.049    180.515
 doit1(rnorm(10)) 294634.495 431607.000 553591.6393 574493.991 683628.835
 doit2(rnorm(10)) 181559.484 185691.817 303403.1978 242827.216 434731.013
 doit3(rnorm(10))   3488.856   4037.378   6139.1678   4277.022   5135.977
 doit4(rnorm(10))   1329.750   2011.054   3375.4122   2056.264   3365.755
        max neval
   4564.644    10
 725345.686    10
 554440.751    10
  19812.770    10
  13133.565    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   27.776   60.5995   89.88432   73.632   99.6885  8735.753
 doit3(rnorm(10)) 1815.075 2847.2325 3868.47095 3466.981 3792.8435 85426.012
 doit4(rnorm(10))  951.183 1512.5415 2100.13385 1872.042 2106.5825 36063.481
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4089 200.4132 200.5511 200.4305 200.6135 200.8895     5
 doit1(rnorm(10)) 470.9393 500.5730 610.1472 630.9001 704.0735 744.2503     5
 doit2(rnorm(10)) 335.5921 378.7384 506.4158 463.8951 516.5561 837.2971     5
 doit3(rnorm(10)) 203.8912 204.0449 209.2873 209.5477 210.0121 218.9408     5
 doit4(rnorm(10)) 202.5124 202.7620 210.7867 205.5313 208.9089 234.2187     5
> 
> 
