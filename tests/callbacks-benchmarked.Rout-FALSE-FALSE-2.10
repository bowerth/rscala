> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     65.462     94.970    490.2384    145.989    177.888
 doit1(rnorm(10)) 400178.558 459085.777 683478.0157 708145.731 815849.802
 doit2(rnorm(10)) 270392.276 330821.156 433963.3346 404889.297 495596.786
 doit3(rnorm(10))   3600.182   4940.684   7955.6272   6995.751  10575.972
 doit4(rnorm(10))   1761.271   3399.827   7583.2769   5431.176   9735.337
         max neval
    3739.905    10
 1105089.800    10
  652971.633    10
   16823.816    10
   19799.741    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq       max
 doit0(rnorm(10))   30.939   67.419   88.50996   85.0575  106.100    212.50
 doit3(rnorm(10)) 2165.920 3627.054 5815.03468 4205.5740 4918.878 118116.28
 doit4(rnorm(10)) 1200.493 1926.190 2977.17414 2324.8280 2667.009  40415.24
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4639 200.5136 201.2181 200.5206 200.6965 203.8962     5
 doit1(rnorm(10)) 579.5624 627.9867 680.0309 634.6909 652.3149 905.5994     5
 doit2(rnorm(10)) 397.6583 411.0030 542.1795 555.2138 625.6308 721.3915     5
 doit3(rnorm(10)) 205.0346 205.8005 209.9346 207.5524 215.1800 216.1053     5
 doit4(rnorm(10)) 202.8957 203.1301 207.2078 207.4809 208.1150 214.4173     5
> 
> 
