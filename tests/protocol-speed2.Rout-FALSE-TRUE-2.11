> heap.maximum <- "3G"
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.3.5-551
Date:                 2017-09-26
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.10)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.10.x, 2.11.x,
                      and 2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-09-26 15:06:32 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Built:                R 3.4.1; ; 2017-09-26 15:06:33 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaSettings           Settings of the Scala Interpreter
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/UShare/dahl/local/R/packages/rscala/doc’:

article: Integration of R and Scala Using rscala (source)

> 
> func0a <- function(x=matrix(0.0,nrow=10000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=20000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=200,ncol=300)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(60000)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 0.228 MB
+   s %!% 'new Array[Int](6000000)'
+ }
> 
> s$a <- 1:6000000
> invisible(s$a)
> rng <- s$.scala.util.Random$new()
> invisible(sapply(1:1000,function(i) rng$nextGaussian()))   # Burn-in
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   rng$nextGaussian(),
+   unit="us",
+   times=2500)
Unit: microseconds
               expr     min       lq     mean  median      uq      max neval
 rng$nextGaussian() 397.734 723.8595 1689.107 832.764 949.909 58331.21  2500
> 
> microbenchmark(
+   rng$nextGaussian(),
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:6000000,
+   s$a,
+   unit="ms",
+   times=25)
Unit: milliseconds
               expr        min         lq      mean     median         uq
 rng$nextGaussian()   0.920095   1.269901  51.86040   5.316381   13.21039
           func0a() 512.358891 657.080617 802.90810 744.350672  890.54480
           func1a() 548.422198 769.325744 964.58760 922.588515 1148.40119
           func1b()   3.927548   4.576695  10.97173   8.120221   16.60261
           func2a() 235.555441 324.827132 498.88836 417.865934  513.76768
           func2b()   2.079786   3.772095 104.45932   6.694400   19.62768
           func3a()  67.055686 113.496269 269.72878 150.616978  303.75904
           func4a() 111.729823 176.006989 268.48489 244.073739  282.39121
     s$a <- 1:6e+06  41.218598  70.749241 142.71141  92.562971  143.02491
                s$a 227.992927 293.162687 469.95084 405.031644  495.25484
        max neval
  401.85715    25
 1554.56172    25
 1718.41709    25
   31.29486    25
 1788.97919    25
 1073.16864    25
 1723.44303    25
  702.18466    25
  558.66692    25
 1647.59789    25
> 
> 
