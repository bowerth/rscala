> heap.maximum <- "3G"
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # FALSE # TRUE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.3.5-537
Date:                 2017-09-22
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.10)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.10.x, 2.11.x,
                      and 2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-09-22 16:14:09 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Built:                R 3.4.1; ; 2017-09-22 16:14:10 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaSettings           Settings of the Scala Interpreter
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/UShare/dahl/local/R/packages/rscala/doc’:

article: Integration of R and Scala Using rscala (source)

> 
> func0a <- function(x=matrix(0.0,nrow=10000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=20000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=200,ncol=300)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(60000)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 0.228 MB
+   s %!% 'new Array[Int](6000000)'
+ }
> 
> s$a <- 1:6000000
> invisible(s$a)
> rng <- s$.scala.util.Random$new()
> invisible(sapply(1:1000,function(i) rng$nextGaussian()))   # Burn-in
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   rng$nextGaussian(),
+   unit="us",
+   times=2500)
Unit: microseconds
               expr     min       lq     mean  median       uq      max neval
 rng$nextGaussian() 351.519 597.8365 1077.122 687.752 766.5665 58788.13  2500
> 
> microbenchmark(
+   rng$nextGaussian(),
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:6000000,
+   s$a,
+   unit="ms",
+   times=25)
Unit: milliseconds
               expr        min         lq      mean     median         uq
 rng$nextGaussian()   0.564370   0.921651  49.91143   2.821123   19.59616
           func0a() 302.985418 524.593582 680.02435 670.446328  797.23559
           func1a() 473.549716 727.020236 979.43998 939.819267 1201.28580
           func1b()   4.669975   7.638186  11.87277   9.953798   15.79589
           func2a() 186.557768 331.547019 447.76255 380.802377  473.51477
           func2b()   2.810802   5.345195  82.72986   8.049025   24.46934
           func3a()  75.123325 127.754165 263.01899 178.305908  241.13943
           func4a() 123.386082 161.216392 215.01465 198.242270  244.84010
     s$a <- 1:6e+06  45.217406  58.061046 119.86254  83.972482  132.34079
                s$a 143.899386 231.321402 361.13844 319.577614  376.28042
       max neval
  371.5311    25
 1130.0957    25
 1914.0364    25
   34.9841    25
 1380.1364    25
  955.8573    25
 2061.1158    25
  530.7253    25
  407.9644    25
 1116.6210    25
> 
> 
