> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # FALSE # FALSE
> 
> 
> ####
> 
> 
> rng1 <- s %.~% "new scala.util.Random"
> rng1$nextDouble()
[1] 0.08725006
> 
> s$r1 <- rng1
> rng2 <- s$r1
> rng2$nextDouble()
[1] 0.6949427
> 
> rng3 <- s$.scala.util.Random$new()
> rng3$nextDouble()
[1] 0.5011086
> 
> s$r3 <- rng3
> rng4 <- s$r3
> rng4$nextDouble()
[1] 0.1154792
> 
> f <- rng4$nextDouble(.EVALUATE=FALSE)
> f()
[1] 0.1449048
> 
> 
> ####
> 
> 
> see <- "David"
> mkFunc1 <- function() {
+   see <- "B."
+   x <- "Milly"
+   print(environment())
+   r <- function(x1="Mack",x2="Bob") s %!% '
+     x1+" "+x2+" "+R.getS0("see")
+   '
+   r
+ }
> y1 <- mkFunc1()
<environment: 0x38bcdc8>
> identical(y1("Lisa","Dahl"),"Lisa Dahl B.")
[1] TRUE
> 
> 
> mkFunc2 <- function() {
+   see <- "MMMM."
+   x <- "Milly"
+   r <- function(x="Mack",y="Bob") s %.!% '
+       x+" "+y+" "+R.getS0("see")
+   '
+   r
+ }
> y2 <- mkFunc2()
> identical(y2("Lisa","Dahl")$toString(),"Lisa Dahl MMMM.")
[1] TRUE
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 335634 18.0     592000 31.7   460000 24.6
Vcells 625985  4.8    1213949  9.3  1043665  8.0
> 
> 
> 
> func1 <- function() {
+   see <- "Knudsen"
+   y1("Lisa","Dahl")
+ }
> identical(func1(),"Lisa Dahl B.")
[1] TRUE
> 
> 
> ####
> 
> 
> # Realistic timing
> system.time({
+   e <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+ })
   user  system elapsed 
      0       0       0 
> 
> # Taking advantage of caching
> system.time({
+   f <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+ })
   user  system elapsed 
      0       0       0 
> 
> ####
> 
> nextDouble <- function(rng=s$null("scala.util.Random")) s %!% "rng.nextDouble()"
> 
> mkRNG1 <- function() s %.!% 'new scala.util.Random()'
> mkRNG2 <- function() s %.~% 'new scala.util.Random()'
> 
> rng1 <- mkRNG1()
> rng2 <- mkRNG2()
> 
> rng1$nextInt(10L)
[1] 1
> rng2$nextInt(10L)
[1] 8
> 
> str <- rng1$toString(.AS.REFERENCE=TRUE)
> str$length()
[1] 25
> 
> nd0 <- rng1$nextDouble(.EVALUATE=FALSE)
> nd1 <- function() s %!% 'R.cached("@{toString(rng1)}").asInstanceOf[@{rng1[[\'type\']]}].nextDouble()'
> nd2 <- function() s %!% '@{rng2}.nextDouble()'
> 
> library("microbenchmark")
> 
> microbenchmark(
+   runif(1),
+   rng1$nextDouble(),
+   rng2$nextDouble(),
+   nd0(),
+   nd1(),
+   nd2(),
+   times=500
+ )
Unit: microseconds
              expr     min       lq       mean    median        uq        max
          runif(1)   1.638   6.4840   23.08566   10.4885   13.9275   6321.148
 rng1$nextDouble() 380.544 468.0465  973.68627  701.9370  905.5875  33176.090
 rng2$nextDouble() 366.155 454.5395 1355.51896  681.6185  856.4655 267009.211
             nd0() 237.408 275.7190  494.83480  417.2015  539.3655  15263.053
             nd1() 610.781 705.6770 1792.71620 1046.4715 1304.1590 298190.529
             nd2() 510.431 593.9895 1830.87616  884.9955 1105.9350 354726.265
 neval
   500
   500
   500
   500
   500
   500
> 
> ####
> 
> f <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %!% '2*x'
+ }
> 
> f(4)
[1] 8
> tryCatch(f(-3), error=function(e) e)
<simpleError in f(-3): 'x' must be positive>
> f(0)
[1] 20
> 
> h <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %~% '2*R.getD0("x")'
+ }
> 
> h(4)
[1] 8
> tryCatch(h(-3), error=function(e) e)
<simpleError in h(-3): 'x' must be positive>
> h(0)
[1] 20
> 
> microbenchmark(
+   f(4),
+   h(4),        # h is *slow* and it has the memory leak inherent in Scala's REPL.
+   times=100)
Unit: microseconds
 expr       min         lq       mean     median        uq       max neval
 f(4)   615.618   1116.423   3332.598   1271.504   1466.76  48363.44   100
 h(4) 99597.309 162302.656 226574.051 211504.306 280152.07 875193.91   100
> 
> 
> 
> 
> ####
> 
> s$.scala.util.Random$nextDouble()
[1] 0.5829285
> m <- s$.scala.util.Random$new(342L,.EVALUATE=FALSE)
> m(23436)$nextDouble()
[1] 0.8011135
> m(63502)$nextDouble()
[1] 0.1435077
> m(93222)$nextDouble()
[1] 0.4889048
> m(93222)$nextDouble()
[1] 0.4889048
> 
> n <- m(5)$nextDouble(.EVALUATE=FALSE)
> n()
[1] 0.7305199
> n()
[1] 0.08825841
> n()
[1] 0.4889045
> 
> s$'.Array[Int]'$new(5L)
[1] 0 0 0 0 0
> 
> ####
> 
> s$a <- 1:10
> a <- s$.a
> a$apply(3L)
[1] 4
> 
> s$.scala.util.Random$nextDouble()
[1] 0.786606
> s$.scala.util.Random$nextDouble()
[1] 0.8757616
> 
> s %@% 'import scala.util.Random'
> s$.Random$nextDouble()
[1] 0.7682892
> 
> a <- function() s %!% 'Random.nextDouble'
> a()
[1] 0.6592562
> 
> a <- s$.scala.util.Random
> a$nextDouble()
[1] 0.4583235
> 
> b <- ( function() s %!% 'scala.util.Random' )()
> b$nextDouble()
[1] 0.8086814
> 
> microbenchmark(
+   a$nextDouble(),
+   b$nextDouble(),
+   times=1000
+   )
Unit: microseconds
           expr     min       lq     mean   median       uq      max neval
 a$nextDouble() 354.045 408.5015 799.9620 623.1050 742.8260 35612.08  1000
 b$nextDouble() 382.821 415.1665 807.3185 630.2285 772.2765 25717.13  1000
>   
> 
> ####
> 
> f <- function(x, wantNull=TRUE) s %.!% '
+   val r = R.getReference(x)
+   if ( wantNull ) null else r
+ '
> 
> a <- f(II(1:10), FALSE)
> a$name()
[1] "S7zME0qX"
> 
> g <- function(func, y=scalaNull("PersistentReference")) s %!% '
+   R.invoke(func,y)
+ '
> 
> g(print, a)
 [1]  1  2  3  4  5  6  7  8  9 10
attr(,"class")
[1] "ScalaAsIs"
> 
> 
> ####
> 
> f <- function(x=scalaNull("(Int,Int)")) s %!% 'x._1 + x._2'
> g <- s %~% "(300,400)"
> f(g)
[1] 700
> f(s %.~% "(30,40)")
[1] 70
> 
> f2 <- function() s %~% 'println("Yes")'
> f2()
> capture.output(f2())
character(0)
> 
> a <- s %.~% "(300,234)"
> f1 <- function(x=scalaNull("(Int,Int)"),y=numeric()) s %!% 'x._1 + x._2 + y.sum'
> f1(a,c(2,3,4,6))
[1] 549
> 
> f1 <- function(x=scalaNull("(Int,Int)"),y=scalaNull("Array[Double]")) s %!% 'x._1 + x._2 + y.sum'
> b <- s %.~% "Array[Double](2,3,4,5)"
> f1(a,b)
[1] 548
> 
> ####
> 
> (function() s %!% 'println("Yes")')()
> (function() s %!% '0')()
[1] 0
> (function() s %!% 'null')()
> 
> ####
> 
> tryCatch((function() s %!% 'a+b')(),error = function(e) e)
<simpleError in scalaDef(interpreter, snippet, NA): Problem defining function.>
> tryCatch((function() s %!% 'a+')(),error = function(e) e)
<simpleError in scalaDef(interpreter, snippet, NA): Problem defining function.>
> tryCatch((function() s %!% 'import org.asdfad')(),error = function(e) {e})
<simpleError in scalaDef(interpreter, snippet, NA): Problem defining function.>
> tryCatch((function() s %!% 'throw new RuntimeException()')(),error = function(e) {e})
<simpleError in scalaDef(interpreter, snippet, NA): Problem invoking function.>
> s %~% "5+6"   # Everything's still okay!
[1] 11
> 
> 
