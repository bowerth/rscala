> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean       median          uq
 doit0(rnorm(10))     52.743    110.638     586.3358     153.1385     182.933
 doit1(rnorm(10)) 907374.615 962401.212 1081725.7860 1050670.3300 1230012.973
 doit2(rnorm(10)) 494181.222 513244.157  642205.8035  598921.0535  698066.622
 doit3(rnorm(10))   3331.029   6018.485   10258.4173    8276.8615   10237.063
 doit4(rnorm(10))   1932.455   2590.416    4837.4168    3251.2515    4096.804
         max neval
    4636.116    10
 1273135.963    10
  968794.186    10
   23674.063    10
   18948.529    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median       uq       max
 doit0(rnorm(10))   29.341   54.790   77.75969   70.601   87.633   2141.38
 doit3(rnorm(10)) 2232.436 3483.925 5128.27435 3946.084 4778.152  68052.52
 doit4(rnorm(10)) 1221.732 2072.813 3095.38948 2337.046 2902.248 123402.49
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.2581  200.3951  200.4194  200.3990  200.4727  200.5721
 doit1(rnorm(10)) 1100.6008 1120.5144 1153.4420 1147.8471 1196.9971 1201.2507
 doit2(rnorm(10))  662.6895  707.1501  804.3475  802.4896  855.2323  994.1760
 doit3(rnorm(10))  205.3229  207.2935  212.7715  209.9055  213.8137  227.5217
 doit4(rnorm(10))  203.1772  203.3966  206.5720  203.5824  208.4464  214.2576
 neval
     5
     5
     5
     5
     5
> 
> 
