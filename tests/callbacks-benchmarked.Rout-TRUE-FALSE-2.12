> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     66.491     76.991     564.1808     124.362     156.964
 doit1(rnorm(10)) 746787.398 829927.601 1176037.2728 1126043.544 1307963.821
 doit2(rnorm(10)) 419845.583 426224.291  586267.0910  449387.239  901927.973
 doit3(rnorm(10))   3142.028   3602.333    6794.9806    5297.768    6951.322
 doit4(rnorm(10))   1787.876   2069.552    4280.6354    3344.624    3906.143
         max neval
    4605.741    10
 2238429.699    10
  938593.716    10
   17868.479    10
   13876.853    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq       max
 doit0(rnorm(10))   31.482   60.1385   78.65553   69.815   99.349  2660.077
 doit3(rnorm(10)) 2388.110 2885.3620 4434.04853 4130.931 4852.469 42324.265
 doit4(rnorm(10)) 1404.184 1657.5910 2829.02502 2445.254 2967.867 72193.742
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min        lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4666  200.4689  200.4968  200.4842  200.5268  200.5375
 doit1(rnorm(10)) 949.5426 1079.8205 1155.5054 1148.9659 1208.3001 1390.8978
 doit2(rnorm(10)) 570.0816  641.4706  745.3047  745.9946  813.0698  955.9067
 doit3(rnorm(10)) 205.3292  205.5569  210.9699  206.1288  206.3097  231.5249
 doit4(rnorm(10)) 203.6880  203.7621  206.5485  203.9276  204.2487  217.1163
 neval
     5
     5
     5
     5
     5
> 
> 
