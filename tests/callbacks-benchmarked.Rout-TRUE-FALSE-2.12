> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr         min          lq         mean      median          uq
 doit0(rnorm(10))      58.381      76.902     459.9407     122.235     145.811
 doit1(rnorm(10)) 1007212.173 1406468.362 1649493.4113 1567265.928 1661381.780
 doit2(rnorm(10))  603665.964  699444.836 1047007.9024  991838.394 1401916.584
 doit3(rnorm(10))    4188.903    5379.169    9016.3464    6385.543   12257.328
 doit4(rnorm(10))    2320.845    3263.559   12642.3412    3652.683   12879.817
         max neval
    3638.916    10
 2483505.259    10
 1687409.459    10
   18225.900    10
   57781.848    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq       max
 doit0(rnorm(10))   32.076   66.123   94.45084   89.4825  111.460  3274.381
 doit3(rnorm(10)) 2619.159 4174.260 6137.28892 4841.8715 5149.551 64299.475
 doit4(rnorm(10)) 1504.757 2550.412 4154.07230 2987.8835 3249.213 97963.040
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4187  200.4221  200.4588  200.4321  200.4327  200.5883
 doit1(rnorm(10)) 1088.1054 1239.8304 1364.5572 1316.5418 1372.7716 1805.5366
 doit2(rnorm(10))  743.8338  768.2474  822.8119  833.1258  877.5360  891.3165
 doit3(rnorm(10))  204.4300  205.4966  207.3146  205.9561  206.0210  214.6693
 doit4(rnorm(10))  203.2392  203.8312  207.1282  204.4319  205.9530  218.1856
 neval
     5
     5
     5
     5
     5
> 
> 
