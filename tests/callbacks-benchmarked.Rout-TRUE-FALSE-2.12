> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     81.204    119.818    592.8729    162.162    190.708
 doit1(rnorm(10)) 473153.327 524741.192 779293.4182 722034.056 963223.780
 doit2(rnorm(10)) 285403.735 347339.375 498209.9606 424016.546 655527.056
 doit3(rnorm(10))   4158.388   4592.230  11447.9294   6725.598  14636.230
 doit4(rnorm(10))   2503.810   3255.081   8893.2465   4141.658   8957.304
         max neval
    4622.232    10
 1440903.927    10
 1010574.903    10
   34730.228    10
   41707.891    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq       max
 doit0(rnorm(10))   27.804   48.645   70.31005   60.9655   75.078  2679.196
 doit3(rnorm(10)) 1899.981 2370.582 3236.99483 2578.3940 3817.570 66203.515
 doit4(rnorm(10)) 1028.376 1304.793 1925.34756 1428.1340 2126.188 31412.313
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4592 200.5137 203.5603 200.5342 200.5436 215.7507     5
 doit1(rnorm(10)) 553.4267 569.5559 590.4434 579.1456 606.9655 643.1230     5
 doit2(rnorm(10)) 436.1172 440.8439 466.1857 457.6553 477.2228 519.0895     5
 doit3(rnorm(10)) 203.9001 204.5106 206.0861 205.6600 206.3009 210.0588     5
 doit4(rnorm(10)) 203.3061 203.7915 203.8785 203.8620 203.8809 204.5518     5
> 
> 
