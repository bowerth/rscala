> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     68.979     81.428     955.0769    133.6395     163.780
 doit1(rnorm(10)) 810581.642 895789.431 1014559.5006 965064.8010 1023981.730
 doit2(rnorm(10)) 427654.960 448168.838  579338.3472 460971.0495  600023.928
 doit3(rnorm(10))   4831.124   5317.329    7199.9662   6125.3120    8026.662
 doit4(rnorm(10))   1743.752   2433.431    4812.7771   4097.3595    5190.303
         max neval
    8486.852    10
 1534669.180    10
 1025355.013    10
   12462.975    10
   15239.740    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   31.265   57.1545   84.32433   71.845  100.7765  3055.257
 doit3(rnorm(10)) 2346.900 2887.4190 4428.79227 4171.276 4855.1435 74596.430
 doit4(rnorm(10)) 1306.783 1640.7195 2800.93664 2375.127 2937.0555 85470.446
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4022  200.4123  200.7015  200.5118  200.8296  201.3517
 doit1(rnorm(10)) 1012.8725 1058.6412 1139.7912 1083.8365 1102.8828 1440.7230
 doit2(rnorm(10))  694.9835  736.6513  755.1194  757.1728  765.8351  820.9544
 doit3(rnorm(10))  204.8804  205.0459  205.5560  205.1295  205.2946  207.4298
 doit4(rnorm(10))  202.6006  203.0237  206.2362  203.0445  203.5274  218.9846
 neval
     5
     5
     5
     5
     5
> 
> 
