> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean       median          uq
 doit0(rnorm(10))     66.771    124.780     887.6126     148.2395     174.825
 doit1(rnorm(10)) 798400.775 919802.831 1114647.7734 1019676.9560 1293984.081
 doit2(rnorm(10)) 380233.777 460753.177  686882.8796  564734.7375 1003041.084
 doit3(rnorm(10))   3836.806   5358.872    9661.4050    6934.4890    8884.135
 doit4(rnorm(10))   2981.944   3293.848    4732.1410    4528.9195    5425.549
         max neval
    7662.771    10
 1799816.148    10
 1117629.381    10
   29355.842    10
    9303.172    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq       max
 doit0(rnorm(10))   30.777   61.2985   81.87215   71.5085  101.6195  2958.665
 doit3(rnorm(10)) 2511.776 2866.0000 4325.23574 4119.3845 4875.3465 45254.427
 doit4(rnorm(10)) 1369.537 1650.0565 2920.74914 2441.5530 3032.5635 86852.886
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4330  200.5106  202.1589  200.5193  200.5337  208.7981
 doit1(rnorm(10)) 1086.7592 1118.1186 1284.2104 1230.2951 1409.9321 1575.9473
 doit2(rnorm(10))  734.6819  818.9561  853.3678  848.0791  886.2437  978.8784
 doit3(rnorm(10))  204.7921  205.2131  205.4679  205.5060  205.7421  206.0861
 doit4(rnorm(10))  203.2663  204.0115  207.5267  205.6623  212.1424  212.5512
 neval
     5
     5
     5
     5
     5
> 
> 
