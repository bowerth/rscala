> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     64.509     85.406     607.0745    136.1305     173.095
 doit1(rnorm(10)) 741851.393 859397.917 1053588.8400 987199.9690 1222828.080
 doit2(rnorm(10)) 454169.237 463474.324  644411.5547 538399.4555  933995.210
 doit3(rnorm(10))   3716.455   4716.133    5415.9105   5662.1565    5905.911
 doit4(rnorm(10))   2018.758   2558.268    3929.5987   3964.5605    5050.658
         max neval
    4938.983    10
 1700980.216    10
 1010621.143    10
    7087.639    10
    6613.052    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq       max
 doit0(rnorm(10))   30.966   59.3875   83.30255   70.9645   96.666  3144.832
 doit3(rnorm(10)) 2485.475 2851.4990 4134.34569 3881.1635 4752.836 33922.330
 doit4(rnorm(10)) 1332.811 1641.6485 2713.00828 2225.2925 2904.095 78821.779
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4107  200.4363  203.5947  200.4376  201.5478  215.1412
 doit1(rnorm(10)) 1015.4204 1048.3052 1072.5517 1075.0262 1104.0173 1119.9891
 doit2(rnorm(10))  651.9340  660.9220  686.2168  679.0176  702.6633  736.5472
 doit3(rnorm(10))  204.4255  205.0583  208.0340  205.5433  206.8430  218.2998
 doit4(rnorm(10))  202.3240  203.1568  207.1700  203.1777  203.9436  223.2478
 neval
     5
     5
     5
     5
     5
> 
> 
