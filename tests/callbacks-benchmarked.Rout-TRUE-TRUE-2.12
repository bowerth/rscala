> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     59.622    112.554     441.4997     146.441     175.003
 doit1(rnorm(10)) 840388.423 996549.087 1190963.9687 1127436.129 1266304.920
 doit2(rnorm(10)) 362266.167 459870.564  639769.0789  527560.765  900386.698
 doit3(rnorm(10))   4052.596   5152.594    7150.8432    5898.355    7161.108
 doit4(rnorm(10))   1878.589   2543.357    3755.7883    3308.817    4645.356
         max neval
    3250.576    10
 2008979.874    10
 1077759.682    10
   19113.796    10
    7321.609    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq      max
 doit0(rnorm(10))   33.183   60.7435   82.13653   73.3245  105.4695  1608.31
 doit3(rnorm(10)) 2377.289 2878.7420 4333.09550 4365.4240 4972.7475 21402.02
 doit4(rnorm(10)) 1346.052 1644.1850 2858.77495 2620.6510 3059.3715 79622.70
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4623  200.4650  200.4839  200.4729  200.4751  200.5444
 doit1(rnorm(10)) 1070.3932 1098.1373 1162.7919 1102.4778 1154.4110 1388.5403
 doit2(rnorm(10))  686.0669  689.6018  835.0917  864.5849  868.0795 1067.1256
 doit3(rnorm(10))  204.6512  205.5582  205.9969  206.0912  206.1092  207.5746
 doit4(rnorm(10))  203.3587  203.5684  203.7462  203.8138  203.8238  204.1664
 neval
     5
     5
     5
     5
     5
> 
> 
