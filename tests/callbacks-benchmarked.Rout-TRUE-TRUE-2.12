> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     63.733    150.505     599.6581     167.898     176.409
 doit1(rnorm(10)) 783820.685 936297.775 1163560.4375 1041085.486 1314575.496
 doit2(rnorm(10)) 363586.040 476362.599  681419.8138  566857.289 1065162.186
 doit3(rnorm(10))   4580.894   5923.805    9348.4481    8393.587   10039.151
 doit4(rnorm(10))   2273.802   3681.435    6805.0927    5941.441   10679.308
         max neval
    4669.531    10
 1970429.814    10
 1135354.267    10
   23237.818    10
   14041.369    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq        max
 doit0(rnorm(10))   31.131   63.3895   83.15946   73.542  106.3635   2113.263
 doit3(rnorm(10)) 2678.988 2997.1205 4584.46721 4381.952 5061.8085  32791.099
 doit4(rnorm(10)) 1483.268 1761.8600 3060.34651 2592.737 3142.8485 102428.545
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4987  200.5002  200.5255  200.5359  200.5442  200.5485
 doit1(rnorm(10)) 1097.2390 1273.0343 1349.3191 1330.8080 1408.7440 1636.7701
 doit2(rnorm(10))  750.5590  763.3119  788.0736  775.8228  797.2643  853.4099
 doit3(rnorm(10))  205.9239  206.1491  208.7423  206.4672  206.5264  218.6448
 doit4(rnorm(10))  204.1660  204.4611  206.0858  204.7473  207.9418  209.1130
 neval
     5
     5
     5
     5
     5
> 
> 
