> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr         min          lq         mean      median          uq
 doit0(rnorm(10))      65.460     116.830     651.6821     138.650     157.762
 doit1(rnorm(10)) 1210744.292 1607576.420 1881626.2210 1890707.207 2179259.977
 doit2(rnorm(10))  508318.818  558166.777  963241.2242  918304.289 1206413.107
 doit3(rnorm(10))    5255.227    6048.200    9022.7715    6346.575    8584.158
 doit4(rnorm(10))    3325.507    3500.645    9132.2037    3842.570    4198.179
         max neval
    5356.013    10
 2493363.235    10
 1797930.712    10
   22365.683    10
   33712.696    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq      mean   median        uq       max
 doit0(rnorm(10))   31.567   67.8215  123.7347   84.789  108.0115  18955.87
 doit3(rnorm(10)) 2476.303 4018.0095 5601.9731 4710.402 5047.5165 122664.00
 doit4(rnorm(10)) 1454.870 2408.3245 3599.8936 2867.813 3112.5200  86117.26
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.3784  200.4039  200.8595  200.4379  200.4563  202.6212
 doit1(rnorm(10)) 1222.6621 1241.3891 1274.2656 1262.9717 1313.9646 1330.3404
 doit2(rnorm(10))  653.5653  704.9231  800.6968  842.2881  897.6836  905.0241
 doit3(rnorm(10))  204.7834  205.2477  206.1802  205.9726  206.2408  208.6562
 doit4(rnorm(10))  203.6463  203.7173  206.2793  203.7431  203.9212  216.3687
 neval
     5
     5
     5
     5
     5
> 
> 
