> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     62.714    103.074     553.1254     140.718     159.284
 doit1(rnorm(10)) 860901.489 927863.161 1051995.9418 1017044.164 1088495.909
 doit2(rnorm(10)) 514389.827 545355.543  637044.0951  580499.125  722496.850
 doit3(rnorm(10))   3801.243   4617.941    8439.1877    7569.303   10222.338
 doit4(rnorm(10))   2218.739   2489.338    9002.8936    3826.988   13283.044
         max neval
    4429.264    10
 1529305.594    10
  918700.832    10
   21300.110    10
   28999.068    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq       max
 doit0(rnorm(10))   30.198   60.7025   87.18072   74.6635  102.216  3311.617
 doit3(rnorm(10)) 2335.925 3216.4270 5156.24907 4468.2180 4917.905 85592.962
 doit4(rnorm(10)) 1347.638 1832.1165 3291.13771 2687.5775 3005.665 77459.590
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min        lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4020  200.4089  202.8785  200.4797  202.3693  210.7325
 doit1(rnorm(10)) 892.6662 1026.7167 1041.7467 1069.3398 1072.0971 1147.9139
 doit2(rnorm(10)) 603.6150  613.3625  657.2368  650.6655  696.3025  722.2382
 doit3(rnorm(10)) 204.1308  204.3705  204.7692  204.6839  205.3169  205.3437
 doit4(rnorm(10)) 203.5255  203.5349  204.2919  203.8565  204.8329  205.7095
 neval
     5
     5
     5
     5
     5
> 
> 
