> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     65.549     80.819    488.9178    133.290    161.628
 doit1(rnorm(10)) 473701.242 544162.609 689176.3041 666406.551 825471.396
 doit2(rnorm(10)) 289557.938 359448.625 484473.1398 412048.046 585577.252
 doit3(rnorm(10))   3166.083   5037.147   5450.3030   5195.741   6695.850
 doit4(rnorm(10))   1575.964   2857.271   4762.4087   3692.601   3969.085
         max neval
    3814.276    10
  935341.908    10
 1050754.666    10
    7142.553    10
   17153.631    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq       max
 doit0(rnorm(10))   29.819   56.0755   78.42344   68.608   99.660  2019.671
 doit3(rnorm(10)) 2153.453 2545.4045 3771.47513 3462.206 4124.360 79097.999
 doit4(rnorm(10)) 1172.558 1430.3705 2137.23144 1928.722 2409.368 42618.410
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3896 200.4269 200.4501 200.4483 200.4830 200.5026     5
 doit1(rnorm(10)) 558.6806 632.6873 625.4940 637.8420 649.0674 649.1925     5
 doit2(rnorm(10)) 461.4967 462.3717 476.9915 483.0414 487.0645 490.9835     5
 doit3(rnorm(10)) 203.8234 204.5675 205.1185 204.5824 204.6049 208.0143     5
 doit4(rnorm(10)) 202.5722 202.6761 203.0694 203.1010 203.2181 203.7793     5
> 
> 
