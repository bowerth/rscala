> jars <- c("commons-math3-3.2.jar","shallot.jar")
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # TRUE # TRUE
> 
> tryCatch(s %~% 'new org.apache.commons.math3.random.EmpiricalDistribution()',error=function(e) e)   # Scala 2.11.x class loader is weird.  This line avoid subsequent problems.
ScalaInterpreterReference... res1: org.apache.commons.math3.random.EmpiricalDistribution
> 
> 
> rscala:::scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
package org.apache.commons.math3.random;
class RandomDataGenerator extends scala.AnyRef with java.io.Serializable with org.apache.commons.math3.random.RandomData {
  final var secRand: java.security.SecureRandom;
  final var rand: org.apache.commons.math3.random.RandomGenerator;
  def getNatural(scala.Int): scala.Array[scala.Int];
  def shuffle(scala.Array[scala.Int], scala.Int): scala.Unit;
  def getSecRan(): java.security.SecureRandom;
  def initRan(): scala.Unit;
  def getRandomGenerator(): org.apache.commons.math3.random.RandomGenerator;
  def setSecureAlgorithm(java.lang.String, java.lang.String): scala.Unit;
    throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException
  def reSeed(): scala.Unit;
  def reSeedSecure(scala.Long): scala.Unit;
  def reSeedSecure(): scala.Unit;
  def reSeed(scala.Long): scala.Unit;
  def nextSample(java.util.Collection, scala.Int): scala.Array[scala.Any];
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextPermutation(scala.Int, scala.Int): scala.Array[scala.Int];
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextUniform(scala.Double, scala.Double, scala.Boolean): scala.Double;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
  def nextUniform(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException, org.apache.commons.math3.exception.NotFiniteNumberException, org.apache.commons.math3.exception.NotANumberException
  def nextF(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextChiSquare(scala.Double): scala.Double;
  def nextCauchy(scala.Double, scala.Double): scala.Double;
  def nextBinomial(scala.Int, scala.Double): scala.Int;
  def nextBeta(scala.Double, scala.Double): scala.Double;
  def nextZipf(scala.Int, scala.Double): scala.Int;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextWeibull(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextT(scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextPascal(scala.Int, scala.Double): scala.Int;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.OutOfRangeException
  def nextHypergeometric(scala.Int, scala.Int, scala.Int): scala.Int;
    throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.NotStrictlyPositiveException, org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextGamma(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextExponential(scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextGaussian(scala.Double, scala.Double): scala.Double;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextPoisson(scala.Double): scala.Long;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextSecureLong(scala.Long, scala.Long): scala.Long;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextSecureInt(scala.Int, scala.Int): scala.Int;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextSecureHexString(scala.Int): java.lang.String;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def nextLong(scala.Long, scala.Long): scala.Long;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextInt(scala.Int, scala.Int): scala.Int;
    throws org.apache.commons.math3.exception.NumberIsTooLargeException
  def nextHexString(scala.Int): java.lang.String;
    throws org.apache.commons.math3.exception.NotStrictlyPositiveException
  def this(org.apache.commons.math3.random.RandomGenerator): scala.Unit;
  def this(): scala.Unit;
}
object RandomDataGenerator {
  def nextLong(org.apache.commons.math3.random.RandomGenerator, scala.Long): scala.Long;
    throws java.lang.IllegalArgumentException
  def nextLong(java.security.SecureRandom, scala.Long): scala.Long;
    throws java.lang.IllegalArgumentException
  final val serialVersionUID: scala.Long;
}
> s$.org.apache.commons.math3.random.RandomDataGenerator
ScalaInterpreterItem for org.apache.commons.math3.random.RandomDataGenerator
> rdg <- s$.org.apache.commons.math3.random.RandomDataGenerator$new()
> 
> rdg$reSeed(39234L)
> rexp <- rdg$nextExponential(2,.EVALUATE=FALSE)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min        lq     mean   median       uq      max neval
 rdg$nextExponential(4) 1884.396 3356.0545 5394.609 3631.534 4108.077 86707.94  1000
                rexp(4)  491.538  916.4445 1746.960 1053.975 1157.454 67119.30  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min        lq     mean   median        uq      max neval
 rdg$nextExponential(4) 1773.030 2203.1090 3608.162 2965.212 3388.4755 91752.75  1000
                rexp(4)  409.345  636.3265 1140.734  824.182  976.4955 51901.02  1000
> microbenchmark(rdg$nextExponential(4),rexp(4),times=1000L)
Unit: microseconds
                   expr      min       lq     mean    median       uq       max neval
 rdg$nextExponential(4) 1755.863 2550.865 3948.143 3308.3005 3479.069 104813.91  1000
                rexp(4)  481.083  590.562 1152.846  922.5445 1003.216  61575.43  1000
> 
> s$.org.ddahl.shallot.parameter.Mass
ScalaInterpreterItem for org.ddahl.shallot.parameter.Mass
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> s %~% "3+4"
[1] 7
> 
> mass <- s$.org.ddahl.shallot.parameter.Mass$apply(3.4)
> massFactory1 <- s$.org.ddahl.shallot.parameter.Mass$factory(mass)
> massFactory2 <- s$.org.ddahl.shallot.parameter.Mass$factory(3.0)
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> massFactory3$apply()$logValue()
[1] -2.27295
> massFactory3$apply()$logValue()
[1] -3.893189
> massFactory3$apply()$logValue()
[1] -2.183371
> 
> 
> 
> s %@% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
> 
> d <- s$.Bob$new()
> d[['type']]                           # Note the weird 'iw$' prepended to 'Bob'
[1] "iw$Bob"
> tryCatch(d$b(),error=function(e) e)   # Doesn't work
<console>:13: error: not found: type iw$Bob
              R.cached(".9").asInstanceOf[iw$Bob].b}
                                          ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> 
> d[['type']] <- "Bob"     # Cast it to be 'Bob'
> d$b()                    # Now it does
[1] 4
> 
> d$sum(4L)
[1] 11
> m <- d$sum(5L,.EVALUATE=FALSE)
> 
> m(3)                                                   # Casting is not necessary here
[1] 10
> d$sum(as.integer(3))                                   # But it is here
[1] 10
> 
> 
