> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     58.933    101.793    507.0405    145.598    217.112
 doit1(rnorm(10)) 362569.466 439484.163 576478.3599 523791.590 708730.468
 doit2(rnorm(10)) 185036.965 210189.764 360300.7385 319531.686 532932.532
 doit3(rnorm(10))   2947.130   3934.780   5685.4176   5214.809   7665.745
 doit4(rnorm(10))   2063.480   2185.421   4598.3080   2686.221   3591.233
        max neval
   3775.658    10
 864965.674    10
 634479.599    10
   9405.722    10
  20464.075    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   27.858   52.7385   75.01658   67.161   89.6845  2633.467
 doit3(rnorm(10)) 1762.741 2327.1320 3661.62367 3189.943 3721.3290 89159.443
 doit4(rnorm(10))  873.888 1085.8160 1826.40347 1635.102 2023.7380 20949.465
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3875 200.4058 201.6359 200.4146 200.4467 206.5250     5
 doit1(rnorm(10)) 437.2797 514.9680 610.1828 572.1664 606.6644 919.8358     5
 doit2(rnorm(10)) 346.2806 387.0715 415.9572 427.5054 436.8731 482.0556     5
 doit3(rnorm(10)) 203.7659 203.7823 205.4475 204.7590 206.2474 208.6830     5
 doit4(rnorm(10)) 202.3916 202.4880 211.1854 203.2912 209.5584 238.1976     5
> 
> 
