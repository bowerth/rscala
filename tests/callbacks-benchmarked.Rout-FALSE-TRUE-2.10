> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     65.175     98.648    666.0919    158.402    200.222
 doit1(rnorm(10)) 362232.015 465475.815 656809.2990 675153.938 736106.540
 doit2(rnorm(10)) 152467.734 198611.635 341466.4906 241394.745 598277.687
 doit3(rnorm(10))   2924.796   5733.632  16802.1203   7417.318  15262.205
 doit4(rnorm(10))   1409.901   2693.750   6681.0918   3303.467   8401.432
        max neval
   5374.542    10
 932822.464    10
 647778.470    10
  89485.973    10
  24184.564    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq        max
 doit0(rnorm(10))   29.840   66.2425   91.76008   84.3335  112.3675   1616.258
 doit3(rnorm(10)) 2099.724 3665.9225 5731.16076 4262.0700 4696.2420 148518.139
 doit4(rnorm(10)) 1120.839 1973.1350 3411.89295 2363.0530 2655.2710  84793.904
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4204 200.4432 200.4545 200.4543 200.4644  200.4904     5
 doit1(rnorm(10)) 494.5376 658.4753 670.2690 704.8869 723.6188  769.8265     5
 doit2(rnorm(10)) 427.0456 437.8848 622.8545 478.9592 643.1325 1127.2504     5
 doit3(rnorm(10)) 204.6815 204.7464 209.9442 205.2348 215.6181  219.4401     5
 doit4(rnorm(10)) 202.9481 203.2413 210.2217 212.8198 213.6786  218.4207     5
> 
> 
