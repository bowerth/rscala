> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     91.386    120.879    660.4564    173.2655    189.357
 doit1(rnorm(10)) 373594.459 536752.838 591613.7672 608967.6395 666745.236
 doit2(rnorm(10)) 226163.831 251112.271 416258.2241 313505.9135 620498.062
 doit3(rnorm(10))   3870.008   4812.936   7062.9182   5083.1540   6826.201
 doit4(rnorm(10))   2173.598   2676.322   5950.4694   4033.0725   4876.721
        max neval
   5246.822    10
 740033.957    10
 715477.243    10
  16830.573    10
  26073.918    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq        max
 doit0(rnorm(10))   30.594   68.0535   89.97431   90.0545  110.2665    352.877
 doit3(rnorm(10)) 2146.536 3706.6315 6016.98460 4197.2700 4748.1425 110240.310
 doit4(rnorm(10)) 1029.667 1975.1090 3136.22508 2326.8825 2587.2705  51593.277
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4306 200.4841 202.7434 200.4942 201.1987 211.1094     5
 doit1(rnorm(10)) 574.3921 618.0057 655.1164 629.1447 671.1562 782.8834     5
 doit2(rnorm(10)) 401.0753 425.1763 484.0685 493.6658 508.6665 591.7584     5
 doit3(rnorm(10)) 204.9775 205.0842 206.7958 205.0919 208.5190 210.3062     5
 doit4(rnorm(10)) 203.0789 203.0863 211.8076 216.5357 217.1120 219.2252     5
> 
> 
