> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     47.395     86.850    581.6395    136.6265    179.296
 doit1(rnorm(10)) 358455.593 565052.009 656438.0511 676420.4830 784540.003
 doit2(rnorm(10)) 158511.713 216403.155 375787.4952 330175.9840 532072.711
 doit3(rnorm(10))   2724.612   3774.233   9866.4104   4921.5425  12589.234
 doit4(rnorm(10))   1465.375   1524.481   2719.9649   2079.0360   2696.318
        max neval
   4712.838    10
 875631.598    10
 631487.759    10
  40985.148    10
   7856.971    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq      max
 doit0(rnorm(10))   31.291   57.751   90.37637   69.9375   99.927 10142.65
 doit3(rnorm(10)) 2052.362 2568.546 4384.97872 3770.2215 4297.248 82568.39
 doit4(rnorm(10)) 1008.930 1288.545 2546.01639 2005.9775 2384.029 80815.27
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4264 200.4279 200.4411 200.4338 200.4373  200.4801     5
 doit1(rnorm(10)) 559.4058 596.6626 809.0475 631.3032 770.9351 1486.9308     5
 doit2(rnorm(10)) 477.7880 578.9200 589.7113 620.3551 621.0577  650.4356     5
 doit3(rnorm(10)) 204.6421 204.8741 206.3779 204.9027 208.3177  209.1531     5
 doit4(rnorm(10)) 202.7647 202.9446 206.8969 202.9680 208.2317  217.5753     5
> 
> 
