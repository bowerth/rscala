> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     62.975     95.173    537.3805    144.452     183.068
 doit1(rnorm(10)) 334966.486 598036.513 891432.5757 841960.458 1216729.986
 doit2(rnorm(10)) 347261.568 502012.677 666277.4491 573289.048  900861.187
 doit3(rnorm(10))   2636.040   4060.575   6083.8102   4873.853    5352.304
 doit4(rnorm(10))   1248.857   2336.505   8110.2017   3489.853    8399.960
         max neval
    3905.559    10
 1445827.594    10
  994533.263    10
   14927.786    10
   34464.841    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq        max
 doit0(rnorm(10))   32.816   69.3495   94.37798   92.0505  110.4865   2940.504
 doit3(rnorm(10)) 2235.087 3855.3910 6914.72663 4216.5515 5052.4940 133843.513
 doit4(rnorm(10)) 1127.242 2023.3675 3730.83230 2323.4740 2573.0110  68747.639
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.3909 200.4076 200.4165 200.4259 200.4284  200.4297     5
 doit1(rnorm(10)) 466.1016 567.0555 785.6913 583.0140 895.0908 1417.1947     5
 doit2(rnorm(10)) 439.3408 444.3029 487.2849 488.6755 531.5077  532.5974     5
 doit3(rnorm(10)) 204.4093 204.4215 209.8853 207.5779 214.9932  218.0245     5
 doit4(rnorm(10)) 202.9837 203.0052 204.6866 203.0053 206.6060  207.8329     5
> 
> 
