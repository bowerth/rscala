> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     77.169    102.850    553.6277    144.2945    153.152
 doit1(rnorm(10)) 358765.539 454490.474 590161.7915 548893.4515 688899.308
 doit2(rnorm(10)) 158391.405 272859.673 392387.1782 329512.5760 586794.796
 doit3(rnorm(10))   2857.565   4391.107   4807.7979   4723.2885   5413.648
 doit4(rnorm(10))   1444.848   2008.798   3310.6719   2594.1905   4573.339
        max neval
   4401.062    10
 872003.230    10
 729869.713    10
   6385.930    10
   7187.450    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq       max
 doit0(rnorm(10))   30.348   62.3195   85.83483   75.112   97.409   6224.30
 doit3(rnorm(10)) 2186.346 3395.3375 5394.40891 4055.424 4422.720 121643.37
 doit4(rnorm(10)) 1098.738 1876.1570 2929.64831 2280.846 2490.721  27737.63
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3576 200.4021 201.9130 200.4222 201.5544 206.8285     5
 doit1(rnorm(10)) 492.5954 527.5995 592.3763 553.5603 654.7918 733.3345     5
 doit2(rnorm(10)) 411.6296 418.9976 463.0650 444.8583 501.8359 538.0036     5
 doit3(rnorm(10)) 203.9071 204.1466 209.5707 205.2072 206.7018 227.8910     5
 doit4(rnorm(10)) 202.7365 202.9846 204.2978 202.9926 203.1922 209.5830     5
> 
> 
