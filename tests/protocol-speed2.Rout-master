
R Under development (unstable) (2017-08-27 r73146) -- "Unsuffered Consequences"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> heap.maximum <- "32G"
> source("common.R",print.eval=TRUE)
# R Under development (unstable) (2017-08-27 r73146) # ramah # FALSE # TRUE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.3.5
Date:                 2017-08-30
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.10)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.10.x, 2.11.x,
                      and 2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-08-30 16:25:52 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Repository:           CRAN
Date/Publication:     2017-08-30 20:25:55 UTC
Built:                R 3.5.0; ; 2017-09-20 17:26:03 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaSettings           Settings of the Scala Interpreter
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/home/dahl/local/R/devel/lib/R/library/rscala/doc’:

article: Integration of R and Scala Using rscala (source, pdf)

> 
> func0a <- function(x=matrix(0.0,nrow=10000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=20000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=200,ncol=300)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(60000)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 0.228 MB
+   s %!% 'new Array[Int](6000000)'
+ }
> 
> s$a <- 1:6000000
> invisible(s$a)
> rng <- s$.scala.util.Random$new()
> invisible(sapply(1:1000,function(i) rng$nextGaussian()))   # Burn-in
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   rng$nextGaussian(),
+   unit="us",
+   times=2500)
Unit: microseconds
               expr     min     lq     mean   median       uq      max neval
 rng$nextGaussian() 877.328 926.68 974.6787 936.6435 953.0845 5810.379  2500
> 
> microbenchmark(
+   rng$nextGaussian(),
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:6000000,
+   s$a,
+   unit="ms",
+   times=25)
Unit: milliseconds
               expr        min         lq       mean      median         uq
 rng$nextGaussian()   0.935241   1.121344   31.83755    1.164879    1.51799
           func0a() 236.982575 255.620131  310.34733  281.509897  298.98266
           func1a() 946.882111 976.530318 1011.57837  994.987240 1007.82331
           func1b()  10.525464  11.032494   78.65844   11.168978   11.77919
           func2a() 960.737550 972.226885 1021.76285 1004.025868 1039.41358
           func2b()  10.482500  10.824171   28.82703   11.077501   11.28810
           func3a() 481.769228 494.262274  524.86478  501.504363  529.85517
           func4a() 473.199879 475.898388  521.73074  508.112013  511.95552
     s$a <- 1:6e+06 290.622023 310.216269  375.62594  331.648400  366.76481
                s$a 521.446356 530.379024  586.72609  554.651834  571.35741
       max neval
  267.0318    25
  524.3777    25
 1289.3172    25
  336.5103    25
 1236.5669    25
  283.6227    25
  789.2645    25
 1032.0066    25
  724.9789    25
  900.5314    25
> 
> 
> proc.time()
   user  system elapsed 
 18.684   2.828 121.569 
