> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # FALSE
> 
> assert <- function(xx) {
+   if ( ! identical(( s %~% 'R.get("xx")._1' ), xx) ) stop("Not identical (test 1)")
+   if ( ! identical(( s %~% 'R.xx._1' ), xx) ) stop("Not identical (test 2)")
+   s$xx <- xx
+   s %@% 'R.a = xx'
+   if ( ! identical(a, xx) ) stop("Not identical (test 3)")
+   if ( ! identical(s$.R$get("xx")$"_1"(), xx) ) stop("Not identical (test 4)")
+   m <- function() s %!% 'R.get("xx")._1'
+   if ( ! identical(m(), xx) ) stop("Not identical (test 5)")
+ }
> 
> y <- c(0,1,2,3,4,5,6,8)
> for ( x in list(as.integer(y),as.double(y),as.logical(y),as.character(y),as.raw(y)) ) {
+   assert(x[1])
+   assert(x[2])
+   assert(x)
+   assert(matrix(x,nrow=1))
+   assert(matrix(x,nrow=2))
+   assert(matrix(x,nrow=4))
+ }
> 
> #### Callbacks with named arguments
> 
> mySort <- function(x=NULL,ascending=TRUE) s %!% '
+   R.invokeD1( EphemeralReference("sort"), x, "decreasing" -> ! ascending )
+ '
> 
> set.seed(13242)
> mySort(runif(12),FALSE)
 [1] 0.964528786 0.931479614 0.915030151 0.760027263 0.748870265 0.689618096
 [7] 0.631741739 0.619262272 0.486731296 0.346336568 0.234644646 0.009991797
> 
> #### Get: Unsupported type
> 
> g <- list(3)
> tryCatch(s %@% 'R.g', error=function(e) e)
<simpleError in scalaEval(interpreter, snippet, parent.frame()): Error in evaluation.>
> s %~% "3-2"
[1] 1
> 
> #### Get Undefined items
> 
> tryCatch(s %@% 'R.ggg', error=function(e) e)
<simpleError in scalaEval(interpreter, snippet, parent.frame()): Error in evaluation.>
> s %~% "3+0"
[1] 3
> 
> #### Set: Unsupported non-array type
> 
> tryCatch(s %@% 'R.x = List(1,2,3)', error=function(e) e)
<simpleError in scalaEval(interpreter, snippet, parent.frame()): Error in evaluation.>
> s %~% "3+2"
[1] 5
> 
> #### Set: Unsupported array type
> 
> tryCatch(s %@% 'R.x = Array(new scala.util.Random())', error=function(e) e)
<simpleError in scalaEval(interpreter, snippet, parent.frame()): Error in evaluation.>
> s %~% "3+4"
[1] 7
> 
> #### Set: Unsupported ragged array type
> 
> tryCatch(s %@% 'R.x = Array(Array(1.0),Array(2.0,3.0))', error=function(e) e)
<simpleError in scalaEval(interpreter, snippet, parent.frame()): Error in evaluation.>
> s %~% "3+6"
[1] 9
> 
> #### Setting with indices using single brackets
> 
> x <- matrix(1:4,nrow=2)
> y <- x
> s %@% 'R.set("x",Array(Array(10.0)),"1,1",false)'
> y[1,1] <- 10
> identical(x,y)
[1] TRUE
> 
> tryCatch(s %@% 'R.set("x",Array(Array(10.0)),"1,1asdf",false)', error=function(e) e)
<simpleError in scalaEval(interpreter, snippet, parent.frame()): Error in evaluation.>
> s %~% '"Okay 1"'
[1] "Okay 1"
> 
> #### Setting with indices using double brackets
> 
> x <- as.list(letters)
> y <- x
> s %@% 'R.set("x","Z","26",true)'
> y[[26]] <- "Z"
> identical(x,y)
[1] TRUE
> 
> s %@% 'R.set("x","Z","\'bob\'",true)'
> y[["bob"]] <- "Z"
> identical(x,y)
[1] TRUE
> s %~% '"Okay 2"'
[1] "Okay 2"
> 
> ####
> 
> counter <- 0
> for ( i in 1:10 ) {
+   s %~% 'R.eval("counter <- counter + 1")'
+ }
> if ( counter != 10 ) stop("Counter is off.")
> for ( i in 1:10 ) {
+   s$.R$eval("counter <<- counter - 1")
+ }
> if ( counter != 0 ) stop("Counter is off.")
> 
> 
> # Should be a compile-time error because 'ewf' is not defined.
> tryCatch(s %~% '
+   3+4+ewf
+   R.eval("""
+     cat("I love Lisa!\n")
+     a <- "3+9"
+   """)
+ ',error=function(e) e)
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> s %~% '3+2'
[1] 5
> 
> 
> # Should be an R evaluation error because 'asfd' is not defined and out of place.
> tryCatch(s %~% '
+   3+4
+   R.eval("""
+     cat("I love Lisa!\n")
+     a <- "3+9" asfd
+   """)
+ ',error=function(e) e)
Error in parse(text = snippet) : <text>:4:16: unexpected symbol
3: ")
4:     a <- "3+9" asfd
                  ^
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> s %~% '3+6'
[1] 9
> 
> ###
> 
> myMean <- function(data,offset) {
+   cat("Here is am.\n")
+   mean(data+offset)
+ }
> 
> callRFunction <- function(func=NULL, x=numeric(), y=NULL) s %!% '
+   R.invokeD1(func,x.map(2*_).map(_.getClass),y)
+ '
> 
> tryCatch(callRFunction(myMean,1:4,5), error=function(e) e)
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Invocation error.>
> s %~% "3+4"
[1] 7
> 
> callRFunction <- function(func=NULL, x=numeric(), y=NULL) s %!% '
+   R.invokeD1(func,x.map(2*_),y)
+ '
> 
> callRFunction(myMean,y=0,x=1:100)
Here is am.
[1] 101
> 
> callRFunction0D2 <- function(func=NULL) s %!% 'R.invokeD2(func)'
> callRFunction0D2(gc)
       [,1] [,2]    [,3] [,4]    [,5] [,6]
[1,] 353096 18.9  750400 40.1  463688 24.8
[2,] 646614  5.0 1228796  9.4 1053020  8.1
> 
> tryCatch(callRFunction(1:100),error = function(e) {})
Error in func(.rsX0, y) : could not find function "func"
NULL
> 
> # Should be an R evaluation error because 'asfd' is not a package.
> tryCatch(s %@% 'R.eval("library(asdf)")',error=function(e) e)
Error in library(asdf) : there is no package called ‘asdf’
<simpleError in scalaEval(interpreter, snippet, parent.frame()): Error in evaluation.>
> s %~% 'R.evalD0("3+4")'
[1] 7
> 
> # Note that callbacks can be infinitely deep.
> s %~% "3+4"
[1] 7
> s %~% 'R.evalD0("""s %~% "2+3"""")'
[1] 5
> s %~% "3+4"
[1] 7
> 
> 
> 
