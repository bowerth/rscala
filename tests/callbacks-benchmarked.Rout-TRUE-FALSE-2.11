> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean       median          uq
 doit0(rnorm(10))     65.798    121.723     658.1123     146.2635     168.840
 doit1(rnorm(10)) 635124.510 741159.023 1031515.7618 1138013.7600 1198789.984
 doit2(rnorm(10)) 306549.720 509268.164  644997.7389  568989.4740  716405.374
 doit3(rnorm(10))   5046.814   6318.765   10836.8148    7324.4940    8999.091
 doit4(rnorm(10))   3042.506   3696.910    6923.5716    5693.5420    6954.287
         max neval
    5412.083    10
 1390005.368    10
 1105528.876    10
   39567.937    10
   15253.621    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq        max
 doit0(rnorm(10))   32.020   65.6845   95.09828   81.2965  109.0865   3226.401
 doit3(rnorm(10)) 2540.215 3653.9125 5619.79694 4681.0415 5168.9395 408940.384
 doit4(rnorm(10)) 1377.309 1955.0565 3359.12909 2798.3870 3187.7395  90556.252
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median        uq       max neval
 doit0(rnorm(10)) 200.4255 200.4457 200.6216 200.4463  200.4560  201.3343     5
 doit1(rnorm(10)) 766.4117 770.6735 977.0994 836.2732 1068.2019 1443.9365     5
 doit2(rnorm(10)) 584.0071 608.3598 763.7490 670.2936  907.9679 1048.1164     5
 doit3(rnorm(10)) 205.7358 206.1890 207.2931 206.7995  207.9365  209.8046     5
 doit4(rnorm(10)) 204.0030 204.1044 206.3109 205.7398  208.3269  209.3804     5
> 
> 
