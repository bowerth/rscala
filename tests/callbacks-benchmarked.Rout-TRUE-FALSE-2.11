> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     67.545    104.197    625.8353    158.2805     173.441
 doit1(rnorm(10)) 424958.608 479570.761 875120.7961 860520.7405 1030453.181
 doit2(rnorm(10)) 255808.948 289308.664 457431.7619 364095.3935  672042.834
 doit3(rnorm(10))   4656.977   4865.111  11112.2358   5589.3165   17658.319
 doit4(rnorm(10))   2139.238   2757.134   4695.8532   3280.0545    3614.882
        max neval
    5044.62    10
 1770926.81    10
  933018.56    10
   34782.86    10
   18380.32    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median        uq       max
 doit0(rnorm(10))   32.347   61.680   83.26008   76.1235  103.5335  2708.864
 doit3(rnorm(10)) 2545.357 3011.271 4634.83072 4273.2315 4861.2835 44464.001
 doit4(rnorm(10)) 1364.451 1726.278 2884.12754 2493.0375 2947.4665 78915.596
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median        uq       max neval
 doit0(rnorm(10)) 200.4526 200.4749 200.9486 200.4839  200.5469  202.7845     5
 doit1(rnorm(10)) 764.1914 867.3359 956.9760 907.3277 1061.5527 1184.4720     5
 doit2(rnorm(10)) 580.3350 630.7281 728.4730 688.5979  864.1846  878.5195     5
 doit3(rnorm(10)) 205.3871 205.6694 211.3958 209.7875  211.1943  224.9405     5
 doit4(rnorm(10)) 203.7562 206.0393 213.8725 207.6149  222.6103  229.3418     5
> 
> 
