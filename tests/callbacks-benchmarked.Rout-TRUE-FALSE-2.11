> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     59.942     82.470    521.3572    146.528    164.619
 doit1(rnorm(10)) 594359.056 649963.941 789406.3625 732791.630 828906.909
 doit2(rnorm(10)) 360540.726 371323.506 466622.6487 432286.252 537749.376
 doit3(rnorm(10))   3973.221   4138.718   5614.9923   5095.936   6132.798
 doit4(rnorm(10))   2082.862   2919.554   4464.1529   3452.741   3832.903
         max neval
    4099.573    10
 1343688.836    10
  673879.254    10
   10186.930    10
   13791.859    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median       uq        max
 doit0(rnorm(10))   29.176   56.425   81.42439   68.641  103.369   3037.785
 doit3(rnorm(10)) 2067.665 2530.824 4332.56701 3682.876 4487.542 105619.307
 doit4(rnorm(10)) 1082.912 1395.303 2487.72872 2051.353 2668.628  62448.216
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4036 200.4137 200.7599 200.4191 200.6614 201.9017     5
 doit1(rnorm(10)) 609.2945 697.6745 714.3715 734.9457 764.3228 765.6200     5
 doit2(rnorm(10)) 505.3294 508.2242 562.4536 526.5764 526.9260 745.2123     5
 doit3(rnorm(10)) 204.1085 204.1167 209.0815 204.9984 213.1258 219.0579     5
 doit4(rnorm(10)) 202.4862 202.9267 205.8416 202.9330 202.9987 217.8634     5
> 
> 
