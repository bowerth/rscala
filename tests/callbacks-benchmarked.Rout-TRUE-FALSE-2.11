> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     63.890    114.415    514.6922    133.4195    158.667
 doit1(rnorm(10)) 468995.745 636833.474 832578.1913 781844.5065 929283.138
 doit2(rnorm(10)) 305493.643 362714.341 512714.3898 397763.8630 570763.584
 doit3(rnorm(10))   4062.689   4559.612   5874.0961   5168.3570   5848.257
 doit4(rnorm(10))   1907.546   2592.940   5087.9727   3356.9480   3978.307
         max neval
    4042.738    10
 1590632.990    10
  963016.841    10
   13024.013    10
   14734.630    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq      max
 doit0(rnorm(10))   33.922   61.5985   87.34406   76.9155  100.5585  3784.87
 doit3(rnorm(10)) 2468.433 3707.4075 5375.13024 4444.5150 4919.4300 75444.75
 doit4(rnorm(10)) 1380.599 2224.0210 3544.93554 2620.2245 3029.0875 86756.61
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4362 200.4401  201.7196  200.4658  200.4759  206.7799
 doit1(rnorm(10)) 914.2955 923.3370 1053.5977 1058.8484 1118.9916 1252.5159
 doit2(rnorm(10)) 558.7341 650.8266  737.2849  741.4330  777.9792  957.4515
 doit3(rnorm(10)) 204.6627 204.8099  204.9666  204.8320  205.0483  205.4802
 doit4(rnorm(10)) 203.2706 203.4284  204.4446  203.4404  204.6279  207.4555
 neval
     5
     5
     5
     5
     5
> 
> 
