> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min          lq         mean       median          uq
 doit0(rnorm(10))     49.767      75.807     504.6239     111.5545     155.085
 doit1(rnorm(10)) 932137.190 1166483.806 1428187.6332 1284847.7475 1576967.802
 doit2(rnorm(10)) 470408.016  528193.262  774496.8606  552733.1805  915648.319
 doit3(rnorm(10))   3266.726    3589.083    4928.9035    5333.8905    5945.836
 doit4(rnorm(10))   1940.795    2145.840    9474.9247    3359.5445    3868.576
        max neval
    4079.76    10
 2424445.21    10
 1925845.36    10
    6437.60    10
   46147.61    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq      mean   median       uq        max
 doit0(rnorm(10))   32.261   69.4935  107.5615   91.095  114.489   6106.867
 doit3(rnorm(10)) 2428.626 4428.5800 7412.6658 4854.005 5353.086 126106.108
 doit4(rnorm(10)) 1456.823 2617.6070 4409.5070 2963.520 3253.151  70322.590
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4223 200.4379  201.9442  200.4452  204.0414  204.3743
 doit1(rnorm(10)) 922.9179 946.0685 1093.1854 1030.5370 1131.3352 1435.0684
 doit2(rnorm(10)) 546.3319 625.6650  672.7036  678.4874  690.4700  822.5639
 doit3(rnorm(10)) 205.2618 205.3576  206.8318  205.5120  206.5486  211.4792
 doit4(rnorm(10)) 203.1786 203.5886  207.3359  203.7668  208.2077  217.9375
 neval
     5
     5
     5
     5
     5
> 
> 
