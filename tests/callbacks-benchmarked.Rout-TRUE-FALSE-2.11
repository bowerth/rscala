> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq       mean       median          uq
 doit0(rnorm(10))     39.051     95.384    515.513     120.2465     147.370
 doit1(rnorm(10)) 650814.586 776645.673 950351.125 1002486.5355 1035901.078
 doit2(rnorm(10)) 368523.036 467009.298 585888.640  546309.4290  636619.052
 doit3(rnorm(10))   3845.174   4568.125   5366.749    5612.3070    6065.936
 doit4(rnorm(10))   1842.518   2803.983  11893.509    3662.1140    7842.801
         max neval
    4135.879    10
 1233419.491    10
  961789.457    10
    6882.260    10
   61053.705    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq        max
 doit0(rnorm(10))   28.928   55.1755   78.28052   66.590   89.1325   3057.687
 doit3(rnorm(10)) 2425.994 2785.0470 4346.70605 3779.174 4697.8110  42289.277
 doit4(rnorm(10)) 1339.241 1639.2680 3171.60328 2219.333 2842.5310 488885.475
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4540 200.5135 201.5818 201.3522 202.1780 203.4112     5
 doit1(rnorm(10)) 812.2297 832.1256 878.5133 892.7477 918.5930 936.8704     5
 doit2(rnorm(10)) 558.1096 562.6492 632.3634 589.9830 603.2428 847.8323     5
 doit3(rnorm(10)) 204.8930 205.3006 208.9704 205.9415 206.0887 222.6282     5
 doit4(rnorm(10)) 205.0645 209.7711 213.8209 215.8386 216.4399 221.9905     5
> 
> 
