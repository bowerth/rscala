> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     64.705     86.756    585.0284    148.1705    185.036
 doit1(rnorm(10)) 521716.047 637737.367 765388.5627 756149.4045 860565.876
 doit2(rnorm(10)) 324297.573 369932.251 472011.4382 420541.3835 475168.819
 doit3(rnorm(10))   3878.436   4148.993   8458.2700   5133.4900   9601.009
 doit4(rnorm(10))   2180.876   2292.864   3300.8348   2607.3820   4561.539
         max neval
    4643.115    10
 1181209.345    10
  799012.297    10
   29551.836    10
    6037.872    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median       uq       max
 doit0(rnorm(10))   27.171   53.481   77.03179   65.512   92.968  2728.954
 doit3(rnorm(10)) 1763.320 2185.807 3484.54567 3102.820 3668.472 80753.603
 doit4(rnorm(10))  863.967 1066.543 1763.70580 1619.291 2024.632 17638.609
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3835 200.3897 200.7670 200.4083 200.4239 202.2297     5
 doit1(rnorm(10)) 639.8887 663.4850 730.2649 723.8555 762.8314 861.2640     5
 doit2(rnorm(10)) 484.1217 485.2756 573.6744 523.2610 633.2194 742.4944     5
 doit3(rnorm(10)) 203.1051 203.2696 207.0142 203.6580 203.7081 221.3303     5
 doit4(rnorm(10)) 202.2187 202.2621 206.7600 202.5395 204.7454 222.0345     5
> 
> 
