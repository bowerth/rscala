> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     72.701     75.953     621.4408     128.867     169.734
 doit1(rnorm(10)) 569897.707 928023.546 1017296.6679 1061532.363 1178642.449
 doit2(rnorm(10)) 323488.241 375390.501  615126.2759  564474.664  714682.166
 doit3(rnorm(10))   2723.684   4988.431    9138.8419    5631.230   17030.338
 doit4(rnorm(10))   1415.954   1828.441    4830.1158    3190.528    7817.744
         max neval
    5123.057    10
 1434737.528    10
 1240105.924    10
   20548.008    10
   11803.837    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median       uq        max
 doit0(rnorm(10))   31.340   61.869   92.19723   75.643  100.898   6942.583
 doit3(rnorm(10)) 2191.585 3276.543 5007.63070 3974.957 4325.115 620804.499
 doit4(rnorm(10)) 1096.411 1661.201 2430.34440 2176.083 2484.937  33793.144
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4222 200.4578 201.5326 200.4830 202.0996  204.2005     5
 doit1(rnorm(10)) 866.7689 906.6605 963.2662 908.7351 912.1974 1221.9690     5
 doit2(rnorm(10)) 537.4587 628.4911 758.5275 786.3188 876.8306  963.5382     5
 doit3(rnorm(10)) 204.9770 205.1282 206.6834 205.3310 208.8562  209.1246     5
 doit4(rnorm(10)) 202.4112 203.2792 208.9887 207.0643 209.1417  223.0471     5
> 
> 
