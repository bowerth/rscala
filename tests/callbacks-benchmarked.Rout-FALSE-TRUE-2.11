> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min          lq         mean      median          uq
 doit0(rnorm(10))     69.865      92.804     615.8828     132.477     164.934
 doit1(rnorm(10)) 914695.119 1077618.238 1397854.9269 1382418.837 1470775.937
 doit2(rnorm(10)) 551924.381  584236.566  913445.5058  699333.051 1213950.554
 doit3(rnorm(10))   4010.304    4939.541   10209.5981    5916.041   12828.704
 doit4(rnorm(10))   1993.498    2848.259    9826.4861    3198.595    6421.503
         max neval
    5084.042    10
 2515546.052    10
 2023838.679    10
   27396.848    10
   41187.206    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq        max
 doit0(rnorm(10))   31.687   67.0635   92.98847   89.4065  107.0675   4992.021
 doit3(rnorm(10)) 2212.766 3852.2500 6226.69651 4222.4025 4509.3455 282736.121
 doit4(rnorm(10)) 1169.049 2096.7865 3453.84755 2372.2915 2538.1105  83900.964
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean   median        uq       max
 doit0(rnorm(10)) 200.3987 200.4062  202.1991 200.7054  203.0550  206.4302
 doit1(rnorm(10)) 856.5293 858.4476 1015.0394 969.9746 1137.2373 1253.0082
 doit2(rnorm(10)) 573.9958 642.4264  689.1081 683.4410  717.5242  828.1533
 doit3(rnorm(10)) 204.4393 204.5525  205.6044 204.6380  205.7997  208.5925
 doit4(rnorm(10)) 202.7108 202.7746  204.5343 202.8444  202.9605  211.3813
 neval
     5
     5
     5
     5
     5
> 
> 
