> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     81.527    112.054    571.2145    160.093     180.189
 doit1(rnorm(10)) 480415.866 557496.950 878983.2249 829760.424 1008792.914
 doit2(rnorm(10)) 303710.694 319674.998 477988.4748 342482.664  648282.552
 doit3(rnorm(10))   4386.927   4472.776   9465.5771   5079.537   14793.103
 doit4(rnorm(10))   2316.800   2534.126   5242.3745   4325.837    8343.695
         max neval
    4441.693    10
 1872873.141    10
  987539.814    10
   29526.282    10
    9098.671    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq        max
 doit0(rnorm(10))   31.799   62.2205   84.10198   78.6195  102.1915   2511.166
 doit3(rnorm(10)) 2158.012 3349.2075 4462.38074 3915.7385 4298.4370 116705.232
 doit4(rnorm(10)) 1017.126 1566.3865 2404.12293 2100.7665 2387.1750  80372.050
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4239 200.4750  202.6183  200.4886  204.5788  207.1250
 doit1(rnorm(10)) 884.4536 926.5264 1033.7691 1044.0976 1094.6639 1219.1042
 doit2(rnorm(10)) 522.0008 674.1484  765.2108  754.5905  808.7408 1066.5736
 doit3(rnorm(10)) 204.8126 205.1787  207.9090  205.2432  210.7351  213.5756
 doit4(rnorm(10)) 202.7966 203.8001  205.5186  205.0265  205.7213  210.2485
 neval
     5
     5
     5
     5
     5
> 
> 
