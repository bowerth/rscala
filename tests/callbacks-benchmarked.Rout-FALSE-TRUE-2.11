> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     56.784     87.140    523.9451     143.792     212.956
 doit1(rnorm(10)) 596627.801 775272.415 932006.8076 1028298.480 1057239.826
 doit2(rnorm(10)) 293063.832 420892.803 576279.2933  491566.856  662685.025
 doit3(rnorm(10))   3047.197   4382.913  11216.2642    7235.087   13761.640
 doit4(rnorm(10))   1768.934   2103.366   4786.7978    2811.355    4693.505
         max neval
    3993.543    10
 1183603.943    10
 1164489.326    10
   34871.162    10
   18572.594    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean    median       uq        max
 doit0(rnorm(10))   29.866   58.222   76.3305   72.5395   93.874    183.853
 doit3(rnorm(10)) 2081.015 2769.436 4255.5303 3631.5745 4119.324 402286.425
 doit4(rnorm(10)) 1099.216 1431.586 2176.0324 1957.3010 2312.819  37902.330
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4623 200.4658 201.7467 200.5150 200.5986 206.6920     5
 doit1(rnorm(10)) 744.3266 813.7622 863.8963 854.6259 914.8332 991.9334     5
 doit2(rnorm(10)) 600.3867 650.1265 731.4956 712.9351 821.8241 872.2055     5
 doit3(rnorm(10)) 204.7485 204.7790 208.8065 205.0903 206.2761 223.1387     5
 doit4(rnorm(10)) 203.0073 203.1103 211.5339 206.0701 213.5089 231.9729     5
> 
> 
