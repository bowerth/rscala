> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     60.025     81.811    733.5846    128.886     164.418
 doit1(rnorm(10)) 446445.563 577904.099 876563.8664 791902.200 1092283.259
 doit2(rnorm(10)) 336226.618 353434.015 519239.9940 384010.487  774421.196
 doit3(rnorm(10))   2912.919   3682.383   5007.2946   4408.845    5175.031
 doit4(rnorm(10))   1387.156   1837.012   2704.2589   2457.446    3330.828
         max neval
    6230.073    10
 1884105.140    10
  985590.494    10
    9593.248    10
    5025.823    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq       max
 doit0(rnorm(10))   30.715   61.2595   83.61222   76.849  101.859  1786.283
 doit3(rnorm(10)) 2161.325 2770.9580 4651.02515 3891.777 4285.748 79428.717
 doit4(rnorm(10)) 1092.304 1507.9500 2577.11832 2116.689 2415.463 98713.044
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4488 200.4664  201.6606  200.4684  202.5791  204.3403
 doit1(rnorm(10)) 862.2631 940.1625 1101.4036 1095.2933 1213.6330 1395.6661
 doit2(rnorm(10)) 606.4176 684.5048  741.9872  712.3409  832.2106  874.4620
 doit3(rnorm(10)) 204.3874 204.8103  212.0606  205.0280  220.4434  225.6336
 doit4(rnorm(10)) 202.7655 203.2004  203.5781  203.2694  203.4375  205.2178
 neval
     5
     5
     5
     5
     5
> 
> 
