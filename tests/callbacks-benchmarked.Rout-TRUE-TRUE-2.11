> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     65.285    141.582    647.8113    154.102    209.418
 doit1(rnorm(10)) 498451.562 587666.477 772481.5024 789869.351 829709.137
 doit2(rnorm(10)) 330414.850 352570.867 512896.2583 452055.838 671236.207
 doit3(rnorm(10))   3613.980   5359.622   8291.8855   5918.441   8372.268
 doit4(rnorm(10))   2864.365   3221.249   5719.7956   4302.996   6193.493
         max neval
    5151.846    10
 1320851.731    10
  918887.669    10
   24317.899    10
   12540.509    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean   median       uq       max neval
 doit0(rnorm(10))   28.094   59.600  100.7946   77.249  111.086  9053.787  1000
 doit3(rnorm(10)) 2052.470 3028.178 4885.5788 4031.082 4730.261 75339.275  1000
 doit4(rnorm(10)) 1228.185 1688.462 2900.9812 2263.465 2796.332 41747.422  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4777 200.6001 201.9850 201.4187 201.8441 205.5845     5
 doit1(rnorm(10)) 645.1419 715.5312 743.1875 726.3284 809.1077 819.8283     5
 doit2(rnorm(10)) 457.8642 464.6403 538.4397 513.4482 524.8143 731.4315     5
 doit3(rnorm(10)) 204.6342 204.9132 208.6305 205.6276 211.2089 216.7685     5
 doit4(rnorm(10)) 202.7469 202.9134 203.7697 203.5639 203.9623 205.6622     5
> 
> 
