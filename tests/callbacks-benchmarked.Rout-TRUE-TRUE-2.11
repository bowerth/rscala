> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     74.374     91.855    635.6649    163.168    172.333
 doit1(rnorm(10)) 523860.987 608772.904 883200.1904 755099.116 943699.342
 doit2(rnorm(10)) 236169.675 320827.038 517355.2507 413045.515 721764.224
 doit3(rnorm(10))   3518.567   5220.262   7438.2453   5719.550   8766.776
 doit4(rnorm(10))   1946.060   3204.318   5741.4500   4440.128   6778.367
         max neval
    5127.276    10
 1929264.165    10
 1002110.392    10
   17517.099    10
   17101.049    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq       max
 doit0(rnorm(10))   32.172   60.383   88.20532   74.0575  100.464  5259.899
 doit3(rnorm(10)) 2506.700 3008.845 4866.26235 4300.5520 4914.265 55164.630
 doit4(rnorm(10)) 1388.931 1667.353 2984.42123 2516.2985 2996.423 91769.458
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4426 200.4895 203.3708 200.5066 205.8074  209.6077     5
 doit1(rnorm(10)) 779.7419 840.2884 937.7195 959.4289 984.5299 1124.6082     5
 doit2(rnorm(10)) 519.0376 740.6612 727.4394 759.2881 803.0102  815.2000     5
 doit3(rnorm(10)) 205.0429 205.5044 211.7943 205.6014 205.6954  237.1271     5
 doit4(rnorm(10)) 203.5931 203.7329 208.7220 205.3337 213.9474  217.0030     5
> 
> 
