> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     53.097     75.423    480.9824    118.9125     165.261
 doit1(rnorm(10)) 736367.410 833090.580 971839.1929 960408.3320 1090091.303
 doit2(rnorm(10)) 441678.015 488737.942 637669.9934 546459.5545  755372.403
 doit3(rnorm(10))   4747.482   5253.388   8441.9671   7717.5265   10040.726
 doit4(rnorm(10))   1971.992   3753.585   7480.5956   5889.7430   10439.960
         max neval
    3792.232    10
 1280632.984    10
 1256283.977    10
   19499.899    10
   19621.836    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean    median       uq        max
 doit0(rnorm(10))   28.689   58.589   81.9195   71.1305  103.839   2095.119
 doit3(rnorm(10)) 2501.195 2889.296 5174.8811 4439.4170 4895.381 515161.768
 doit4(rnorm(10)) 1319.386 1703.361 2820.3637 2630.9305 2952.172  77941.905
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4347 200.4378 201.7145 200.4522 200.4728  206.7752     5
 doit1(rnorm(10)) 744.1106 824.5193 914.5482 962.0605 980.2076 1061.8432     5
 doit2(rnorm(10)) 582.9184 633.3513 684.2637 634.9805 783.2643  786.8038     5
 doit3(rnorm(10)) 205.2897 205.4263 206.3440 206.1458 206.8216  208.0367     5
 doit4(rnorm(10)) 203.2929 203.6040 203.7610 203.8633 204.0135  204.0311     5
> 
> 
