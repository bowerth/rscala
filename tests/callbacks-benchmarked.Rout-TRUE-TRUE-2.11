> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     70.073    102.639    645.5728    166.4985     185.865
 doit1(rnorm(10)) 432278.215 597866.811 892275.1238 981314.0215 1087309.687
 doit2(rnorm(10)) 277345.851 313204.939 539564.4900 422638.9205  780330.450
 doit3(rnorm(10))   3853.857   5426.341   7409.1052   6769.8315    7337.253
 doit4(rnorm(10))   2054.960   3042.396   6480.7691   4173.2600    5310.242
        max neval
    5214.05    10
 1321232.71    10
 1037921.36    10
   14735.48    10
   20596.42    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq        max
 doit0(rnorm(10))   32.193   61.4005   90.43389   74.143  104.359   4369.521
 doit3(rnorm(10)) 2462.232 2886.6860 4666.50428 4112.955 4830.737 112154.364
 doit4(rnorm(10)) 1334.919 1652.1005 2878.44313 2398.451 2923.302  78555.048
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4390 200.4790  200.6551  200.4901  200.4946  201.3729
 doit1(rnorm(10)) 822.1747 900.8923 1011.4513 1007.1703 1078.1596 1248.8597
 doit2(rnorm(10)) 703.5847 710.0129  764.9868  740.9749  747.6905  922.6707
 doit3(rnorm(10)) 205.0123 205.3390  207.0274  205.4513  205.8228  213.5115
 doit4(rnorm(10)) 203.6484 203.7733  204.8757  203.8899  204.0151  209.0517
 neval
     5
     5
     5
     5
     5
> 
> 
