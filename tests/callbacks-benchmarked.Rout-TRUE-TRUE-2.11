> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean       median          uq
 doit0(rnorm(10))     54.576     85.115    647.7147     149.3995     169.900
 doit1(rnorm(10)) 755840.478 799020.910 992484.9315 1017834.2145 1168168.815
 doit2(rnorm(10)) 368012.070 555427.148 632341.4712  599595.7010  742909.416
 doit3(rnorm(10))   4315.935   5328.737  12895.4090   10185.2115   19690.951
 doit4(rnorm(10))   2186.767   2505.986   3603.3860    3761.2965    4387.441
         max neval
    5318.170    10
 1208290.191    10
  932468.604    10
   28400.273    10
    5295.741    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq      mean   median        uq        max
 doit0(rnorm(10))   32.088   60.1995   84.6826   75.153   97.0835   3217.462
 doit3(rnorm(10)) 2420.334 3111.8880 4494.7289 4313.680 4807.4340  39529.303
 doit4(rnorm(10)) 1311.421 1728.3225 3429.4226 2579.972 2958.4275 518007.966
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3628 200.4115 200.4357 200.4530 200.4751 200.4762     5
 doit1(rnorm(10)) 792.0567 800.5082 857.2684 857.2248 899.5186 937.0339     5
 doit2(rnorm(10)) 523.7309 565.8768 616.4608 632.3591 657.4310 702.9062     5
 doit3(rnorm(10)) 205.3536 205.4986 208.7669 205.6840 205.9604 221.3378     5
 doit4(rnorm(10)) 202.9392 203.2322 204.2086 203.5542 203.6513 207.6660     5
> 
> 
