> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min          lq         mean       median          uq
 doit0(rnorm(10))     54.337     117.622     565.4643     150.8405     162.619
 doit1(rnorm(10)) 957649.256 1100367.394 1366169.7264 1197776.3130 1414181.232
 doit2(rnorm(10)) 463580.069  681310.336  914192.1925  763357.3955 1031297.811
 doit3(rnorm(10))   5609.333    7157.793   14164.5068    8736.8015   21680.909
 doit4(rnorm(10))   3150.543    4610.115   14967.3590    7020.3765   15963.251
         max neval
    4464.971    10
 2563320.527    10
 1602538.270    10
   42389.528    10
   49009.719    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq        max
 doit0(rnorm(10))   31.030   63.7515   97.84852   83.169  112.175   7180.626
 doit3(rnorm(10)) 2532.563 4043.6475 6807.35954 4882.159 5255.215 193116.465
 doit4(rnorm(10)) 1460.127 2336.5170 4142.97455 2980.908 3231.345  78059.265
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean    median        uq       max
 doit0(rnorm(10)) 200.4110 200.4144 202.9454  201.3549  203.4473  209.0992
 doit1(rnorm(10)) 866.2736 886.1526 988.1945 1014.1973 1059.1307 1115.2183
 doit2(rnorm(10)) 618.9396 638.7141 698.1717  713.3044  748.3785  771.5218
 doit3(rnorm(10)) 205.0037 205.0458 207.6904  205.1830  208.1652  215.0541
 doit4(rnorm(10)) 202.6026 203.6348 204.8819  203.8883  204.5323  209.7518
 neval
     5
     5
     5
     5
     5
> 
> 
