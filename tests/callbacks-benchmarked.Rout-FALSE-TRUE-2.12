> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean       median          uq
 doit0(rnorm(10))     72.516     94.305     666.8156     168.5545     192.724
 doit1(rnorm(10)) 713429.540 901352.980 1045811.0315 1055838.3315 1179525.321
 doit2(rnorm(10)) 405946.011 444114.842  599504.6918  494456.6885  784346.068
 doit3(rnorm(10))   3997.696   5049.236    7518.2661    5832.0930    6901.225
 doit4(rnorm(10))   1755.609   2028.917    3539.4331    2634.8600    3425.499
        max neval
    5398.68    10
 1407173.52    10
 1009723.20    10
   23223.28    10
   10476.86    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq      mean   median       uq      max neval
 doit0(rnorm(10))   30.926   57.8065  101.4991   72.877   97.151 13141.18  1000
 doit3(rnorm(10)) 2044.324 2614.0750 4134.5735 3523.645 4307.761 82464.62  1000
 doit4(rnorm(10)) 1040.491 1363.4700 2155.8121 1920.170 2361.933 22470.26  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4012  200.4230  200.4711  200.5049  200.5115  200.5151
 doit1(rnorm(10)) 1005.7558 1056.7269 1067.5664 1058.2196 1097.8187 1119.3109
 doit2(rnorm(10))  601.0491  705.4376  737.5194  769.5150  789.4492  822.1461
 doit3(rnorm(10))  204.2372  204.9973  207.5209  205.7710  206.2531  216.3459
 doit4(rnorm(10))  202.8212  203.2343  203.9112  203.2570  203.5536  206.6900
 neval
     5
     5
     5
     5
     5
> 
> 
