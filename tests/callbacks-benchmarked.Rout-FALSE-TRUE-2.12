> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean       median          uq
 doit0(rnorm(10))     70.158     83.245     538.1138     130.0305     170.747
 doit1(rnorm(10)) 665272.161 843519.997 1162242.9217 1093497.0505 1362053.912
 doit2(rnorm(10)) 407025.476 468566.430  615724.9264  508405.1255  764431.474
 doit3(rnorm(10))   3598.636   3791.707    4491.5075    4361.9475    4791.663
 doit4(rnorm(10))   1370.017   2305.156    5817.7188    2976.0755    5433.574
         max neval
    4266.890    10
 1997517.402    10
 1045885.348    10
    6623.659    10
   19842.165    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median        uq       max
 doit0(rnorm(10))   30.463   59.049   85.88365   71.731  100.7235  6094.691
 doit3(rnorm(10)) 2138.247 2516.118 3956.07719 3860.606 4216.4795 96016.898
 doit4(rnorm(10)) 1103.024 1343.881 2271.83865 2130.271 2368.6695 74757.825
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min        lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4953  200.5082  200.6319  200.5249  200.5308  201.1004
 doit1(rnorm(10)) 961.3405 1064.0386 1164.9685 1097.8027 1116.3980 1585.2629
 doit2(rnorm(10)) 600.5731  685.1051  762.3104  798.3183  805.4400  922.1155
 doit3(rnorm(10)) 203.7242  204.7825  204.7719  204.9473  205.1712  205.2346
 doit4(rnorm(10)) 202.9726  202.9932  207.1758  203.0111  209.2347  217.6674
 neval
     5
     5
     5
     5
     5
> 
> 
