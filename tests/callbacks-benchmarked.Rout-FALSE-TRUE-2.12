> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     70.443     90.525    622.1884    161.578    211.965
 doit1(rnorm(10)) 407305.757 507194.098 712566.4860 727210.046 842036.792
 doit2(rnorm(10)) 199264.868 303833.477 454466.1866 382912.412 596440.754
 doit3(rnorm(10))   2706.244   3942.543   5949.1926   5089.430   7030.037
 doit4(rnorm(10))   1260.403   2202.937   5344.6640   2309.327   3053.943
         max neval
    4930.104    10
 1109167.754    10
  829506.235    10
   15532.516    10
   31702.319    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median       uq       max
 doit0(rnorm(10))   27.363   52.845   75.45581   65.749   95.561  3107.409
 doit3(rnorm(10)) 1794.661 2222.977 3243.37863 2661.851 3748.293 80991.999
 doit4(rnorm(10))  859.256 1091.283 1644.18275 1284.624 1940.597 32861.565
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.5064 200.5151 201.1974 200.5538 201.3845 203.0272     5
 doit1(rnorm(10)) 562.0539 567.0504 593.7905 583.8107 613.3881 642.6494     5
 doit2(rnorm(10)) 423.6207 457.8568 486.1394 497.9874 512.9279 538.3041     5
 doit3(rnorm(10)) 204.6551 204.7419 205.2909 205.1126 205.6296 206.3155     5
 doit4(rnorm(10)) 202.8503 203.0480 203.7063 203.2293 203.5983 205.8054     5
> 
> 
