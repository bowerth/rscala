> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr         min          lq         mean       median          uq
 doit0(rnorm(10))      63.139      96.315     651.6822     147.5635     163.214
 doit1(rnorm(10)) 1297660.815 1655285.535 1817698.3199 1751995.9860 2109144.371
 doit2(rnorm(10))  588413.995  697504.764 1000582.7363  808875.4875 1464506.535
 doit3(rnorm(10))    4098.811    4936.653   13663.3367    5581.8615   19737.374
 doit4(rnorm(10))    1998.097    2845.883    7821.0897    5334.2100   12139.894
         max neval
    5383.679    10
 2427961.592    10
 1803960.358    10
   36668.592    10
   20364.195    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq      mean   median        uq      max
 doit0(rnorm(10))   32.902   64.2235  100.5339   85.085  104.5665 10089.79
 doit3(rnorm(10)) 2097.200 3506.7875 4873.2891 4077.815 4446.9405 86821.34
 doit4(rnorm(10))  986.512 1860.2835 2747.2891 2263.497 2519.7915 49925.17
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min        lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4080  200.4167  200.4251  200.4216  200.4313  200.4480
 doit1(rnorm(10)) 940.8120 1016.1748 1203.6722 1264.8586 1308.4753 1488.0405
 doit2(rnorm(10)) 719.8293  758.7735  773.8096  789.9197  792.6713  807.8544
 doit3(rnorm(10)) 203.6273  204.4561  205.1076  204.5285  205.7157  207.2105
 doit4(rnorm(10)) 202.9761  202.9860  204.2345  203.3665  204.3040  207.5398
 neval
     5
     5
     5
     5
     5
> 
> 
