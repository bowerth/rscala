> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min          lq         mean       median          uq
 doit0(rnorm(10))     40.819      98.242     443.6228     197.1975     240.448
 doit1(rnorm(10)) 785432.725 1049719.298 1090388.3882 1100389.0650 1153244.413
 doit2(rnorm(10)) 520833.920  572843.960  655618.3584  637090.7615  683038.917
 doit3(rnorm(10))   3389.434    3511.215    8001.4676    8300.0880   11487.287
 doit4(rnorm(10))   1640.502    1734.684    3619.5134    2458.5720    3530.781
         max neval
    2983.014    10
 1387658.714    10
  881817.926    10
   14367.291    10
   11756.590    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq       max
 doit0(rnorm(10))   30.475   53.9345   72.76349   69.618   85.987   292.849
 doit3(rnorm(10)) 1917.739 2626.5065 4139.98128 3497.265 4084.459 74397.278
 doit4(rnorm(10))  956.035 1425.8520 2526.59281 1868.728 2264.765 51154.028
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4439  200.4613  200.4835  200.4650  200.4801  200.5672
 doit1(rnorm(10)) 1051.0663 1051.7260 1094.8847 1083.7921 1115.6680 1172.1711
 doit2(rnorm(10))  664.6764  670.6672  712.8855  722.2973  752.8816  753.9048
 doit3(rnorm(10))  204.2607  204.4756  207.6515  206.4587  206.5509  216.5114
 doit4(rnorm(10))  202.7192  202.8526  209.8386  204.0452  206.3140  233.2619
 neval
     5
     5
     5
     5
     5
> 
> 
