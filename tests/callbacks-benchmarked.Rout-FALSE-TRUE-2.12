> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     92.503    121.378     402.822    147.493     184.930
 doit1(rnorm(10)) 786499.861 889110.144 1079868.942 962626.546 1276193.679
 doit2(rnorm(10)) 386537.258 502195.869  707611.721 555250.846  995745.228
 doit3(rnorm(10))   2939.228   4477.013    8587.817   5360.354   10163.241
 doit4(rnorm(10))   1840.065   2630.861    6182.825   3261.334    5708.518
         max neval
    2746.261    10
 1769948.772    10
 1243474.342    10
   23458.282    10
   29222.736    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median        uq      max
 doit0(rnorm(10))   30.279   55.666   88.00447   66.8895   93.8325 10440.93
 doit3(rnorm(10)) 2112.483 2466.290 3598.21340 3332.5205 4146.8315 68804.18
 doit4(rnorm(10)) 1043.524 1277.857 2168.67741 1809.4215 2321.6025 77722.34
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.3979  200.4381  200.4744  200.4934  200.5064  200.5363
 doit1(rnorm(10)) 1066.8067 1089.4460 1168.8445 1170.7406 1205.2655 1311.9639
 doit2(rnorm(10))  700.1632  733.8731  768.8355  750.1427  829.9221  830.0765
 doit3(rnorm(10))  204.1223  204.4037  204.6308  204.6406  204.9279  205.0594
 doit4(rnorm(10))  202.4582  202.5471  202.8268  202.9160  203.0280  203.1848
 neval
     5
     5
     5
     5
     5
> 
> 
