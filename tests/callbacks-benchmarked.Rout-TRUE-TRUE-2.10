> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     63.404     90.058    619.5457    157.343    181.847
 doit1(rnorm(10)) 298601.494 341701.945 472470.6484 420629.924 567530.369
 doit2(rnorm(10)) 152425.891 190520.882 308795.0204 206593.769 548197.717
 doit3(rnorm(10))   3325.583   4063.418   7346.4934   5213.554   6584.731
 doit4(rnorm(10))   1709.272   2924.950   5551.4711   3692.638   4527.232
        max neval
   4958.721    10
 772935.321    10
 617680.192    10
  17095.144    10
  16780.398    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq        max
 doit0(rnorm(10))   29.347   62.4385   97.27582   79.911  115.5615   5179.038
 doit3(rnorm(10)) 2107.848 3243.9875 5651.63851 4294.451 4870.9575 109089.797
 doit4(rnorm(10)) 1065.162 1836.1750 3305.88707 2533.650 2937.7495  72017.803
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4891 200.5097 200.5706 200.5348 200.5775  200.7420     5
 doit1(rnorm(10)) 551.2529 610.3571 746.1628 629.3977 651.6195 1288.1867     5
 doit2(rnorm(10)) 346.7252 405.3366 427.1564 448.1738 451.9565  483.5897     5
 doit3(rnorm(10)) 204.4634 205.0997 206.1297 205.4980 206.3764  209.2113     5
 doit4(rnorm(10)) 203.8586 203.8718 207.5097 204.1289 206.6709  219.0185     5
> 
> 
