> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     73.790    120.295    518.4121    154.8685    167.308
 doit1(rnorm(10)) 395872.753 562334.007 673537.3966 684379.2190 816453.971
 doit2(rnorm(10)) 208910.862 257633.124 376433.9692 306486.2695 563102.762
 doit3(rnorm(10))   3329.882   5071.087   6712.7571   5526.2845   6429.677
 doit4(rnorm(10))   1938.182   3298.530   9790.2129   4396.6015  10067.095
        max neval
   3938.041    10
 935979.740    10
 687110.918    10
  18463.843    10
  40624.669    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq     mean    median       uq       max
 doit0(rnorm(10))   31.514   70.1415  211.171   96.9105  124.753  37145.38
 doit3(rnorm(10)) 2622.886 4676.8950 7933.918 5270.1100 7273.039 113174.93
 doit4(rnorm(10)) 1542.616 2698.4425 4754.612 3157.8050 3697.601  80061.14
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4665 201.0347 203.7893 204.9333 206.2344  206.2774     5
 doit1(rnorm(10)) 540.2025 597.7992 644.7986 629.9484 698.1711  757.8717     5
 doit2(rnorm(10)) 425.6408 473.2375 612.7740 488.1820 489.9895 1186.8206     5
 doit3(rnorm(10)) 205.8148 206.4190 208.6686 207.7628 211.5763  211.7699     5
 doit4(rnorm(10)) 204.0082 204.7520 210.2915 213.0155 214.7932  214.8886     5
> 
> 
