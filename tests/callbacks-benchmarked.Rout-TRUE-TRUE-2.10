> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     72.157    110.705    672.1074    157.3905    176.777
 doit1(rnorm(10)) 303535.689 525020.778 639976.7813 676462.5175 718110.746
 doit2(rnorm(10)) 198465.023 273685.362 402028.9259 292556.9825 577021.254
 doit3(rnorm(10))   5336.886   6642.126   9832.8010   7202.8080  10939.989
 doit4(rnorm(10))   2996.513   3239.666   6353.3672   4326.8355   8868.053
        max neval
   5455.872    10
 927135.511    10
 796653.671    10
  20887.034    10
  18099.190    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median        uq        max
 doit0(rnorm(10))   31.995   67.0485   96.95429   90.7665  118.8915   2374.043
 doit3(rnorm(10)) 2583.530 4393.1300 7575.27782 4973.9660 5716.3700 157402.560
 doit4(rnorm(10)) 1404.878 2512.8190 4315.74275 2998.1040 3415.7185 114772.851
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4831 200.4880 201.0000 200.5083 200.6014  202.9194     5
 doit1(rnorm(10)) 642.7118 720.8495 821.9179 762.5783 857.7308 1125.7191     5
 doit2(rnorm(10)) 448.5625 449.9931 505.5637 479.9489 561.9769  587.3372     5
 doit3(rnorm(10)) 205.1984 206.2340 207.5665 206.3086 206.3714  213.7204     5
 doit4(rnorm(10)) 204.8979 205.6458 206.8029 205.8130 207.2805  210.3772     5
> 
> 
