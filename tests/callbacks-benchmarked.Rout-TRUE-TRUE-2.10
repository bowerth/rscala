> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     66.085    118.930    626.1088    140.913     158.325
 doit1(rnorm(10)) 551104.589 733287.131 958354.7308 964503.191 1182357.099
 doit2(rnorm(10)) 373176.985 434029.490 622080.5785 503074.519  955203.698
 doit3(rnorm(10))   5457.320   5479.453  13468.5261   7756.184   19846.127
 doit4(rnorm(10))   3023.058   3512.161  10618.8293   6004.232   15079.439
         max neval
    5112.937    10
 1409992.578    10
 1012967.085    10
   37814.097    10
   34292.933    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10))   35.087   72.119  127.8703  102.2815  120.3485  26744.98
 doit3(rnorm(10)) 2597.057 4682.449 8867.8536 5048.1640 8238.5005  95296.38
 doit4(rnorm(10)) 1465.236 2797.290 5439.5451 3081.7880 3441.4450 149944.17
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.3642 200.3865 200.4102 200.4314 200.4323  200.4365     5
 doit1(rnorm(10)) 554.6425 684.7072 855.6744 726.4289 789.2072 1523.3863     5
 doit2(rnorm(10)) 361.5863 434.9935 519.6261 443.6809 625.9367  731.9331     5
 doit3(rnorm(10)) 204.9337 207.2027 213.1548 211.4279 214.5334  227.6763     5
 doit4(rnorm(10)) 203.5814 203.6573 206.6216 203.7699 203.8986  218.2006     5
> 
> 
