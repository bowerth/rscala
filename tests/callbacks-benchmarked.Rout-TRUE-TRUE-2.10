> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     78.356    120.393    585.4779    135.4245    168.403
 doit1(rnorm(10)) 280060.969 471703.825 617680.0365 606086.3965 810050.778
 doit2(rnorm(10)) 197592.444 226010.825 396290.2719 299616.0370 597499.898
 doit3(rnorm(10))   3388.963   4004.340   9329.8785   5557.9790   7402.726
 doit4(rnorm(10))   2562.975   2949.105   5708.2981   3671.6045   5778.024
        max neval
   4677.297    10
 941347.095    10
 742462.002    10
  42595.460    10
  14908.574    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq       max
 doit0(rnorm(10))   32.172   65.339   91.21468   79.8285  108.663  1808.455
 doit3(rnorm(10)) 2471.319 3786.681 5579.59005 4750.5670 5122.864 75141.379
 doit4(rnorm(10)) 1320.775 2256.863 3853.28977 2893.7440 3180.526 95202.774
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4257 200.4749 200.4815 200.4803 200.5108 200.5156     5
 doit1(rnorm(10)) 541.7885 585.2168 619.1583 604.2212 659.7749 704.7903     5
 doit2(rnorm(10)) 368.5068 438.6420 452.7397 453.7799 473.6221 529.1476     5
 doit3(rnorm(10)) 205.2616 205.4254 205.4789 205.5146 205.5885 205.6045     5
 doit4(rnorm(10)) 203.7950 203.8781 225.7405 204.1716 209.8741 306.9838     5
> 
> 
