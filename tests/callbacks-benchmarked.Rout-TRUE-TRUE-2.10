> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # TRUE # TRUE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     61.719    100.400    565.9398    132.0285    164.292
 doit1(rnorm(10)) 387873.146 480536.278 627741.7090 644140.0835 766906.363
 doit2(rnorm(10)) 240565.473 258346.124 371143.1137 310292.5165 534560.716
 doit3(rnorm(10))   5363.843   6339.990  12456.2455   9480.0415  16123.013
 doit4(rnorm(10))   3361.914   3557.074   7721.5590   4770.8940   7286.241
        max neval
   4564.759    10
 834569.168    10
 621309.616    10
  28969.210    10
  26942.960    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean   median       uq       max neval
 doit0(rnorm(10))   29.540   64.172  160.4983   79.505  109.620  52718.96  1000
 doit3(rnorm(10)) 2520.876 3423.355 6297.4601 4651.633 5240.321  92304.34  1000
 doit4(rnorm(10)) 1527.584 2055.726 4599.4321 2882.311 3329.622 150258.13  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.3826 200.4004 200.8011 200.4124 201.3834 201.4264     5
 doit1(rnorm(10)) 518.8564 554.6325 641.2521 594.2713 698.6882 839.8119     5
 doit2(rnorm(10)) 414.8307 420.8978 504.2202 501.7507 534.6462 648.9758     5
 doit3(rnorm(10)) 205.5284 205.8058 210.4055 206.8932 208.8143 224.9855     5
 doit4(rnorm(10)) 203.5429 203.7822 204.7954 204.8835 205.3260 206.4424     5
> 
> 
