> heap.maximum <- "3G"
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # TRUE # FALSE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.3.5-537
Date:                 2017-09-22
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.10)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.10.x, 2.11.x,
                      and 2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-09-22 16:14:09 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Built:                R 3.4.1; ; 2017-09-22 16:14:10 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaSettings           Settings of the Scala Interpreter
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/UShare/dahl/local/R/packages/rscala/doc’:

article: Integration of R and Scala Using rscala (source)

> 
> func0a <- function(x=matrix(0.0,nrow=10000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=20000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=200,ncol=300)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(60000)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 0.228 MB
+   s %!% 'new Array[Int](6000000)'
+ }
> 
> s$a <- 1:6000000
> invisible(s$a)
> rng <- s$.scala.util.Random$new()
> invisible(sapply(1:1000,function(i) rng$nextGaussian()))   # Burn-in
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   rng$nextGaussian(),
+   unit="us",
+   times=2500)
Unit: microseconds
               expr     min      lq     mean   median       uq      max neval
 rng$nextGaussian() 360.531 692.905 1532.147 810.9865 927.2135 58536.93  2500
> 
> microbenchmark(
+   rng$nextGaussian(),
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:6000000,
+   s$a,
+   unit="ms",
+   times=25)
Unit: milliseconds
               expr        min         lq      mean     median          uq
 rng$nextGaussian()   0.546004   1.049769   5.05322   1.387202    4.263184
           func0a() 401.421962 562.229155 683.71451 663.793523  788.757362
           func1a() 587.883149 670.692817 935.56033 869.050073 1115.555781
           func1b()   4.944342   6.422722  11.66648   8.662734   16.348752
           func2a() 159.296474 257.729966 354.05384 333.740330  414.468583
           func2b()   3.076794   4.772176  27.75131   5.053314    8.865316
           func3a()  78.360938  93.856779 183.50277 123.680481  170.478060
           func4a()  89.326193 154.139145 229.71180 196.496894  275.352535
     s$a <- 1:6e+06 134.903367 228.605087 304.48111 254.019599  345.180292
                s$a 144.005891 198.016071 264.83559 226.362071  267.197764
        max neval
   39.47912    25
 1372.00875    25
 2019.61047    25
   29.03134    25
  762.70688    25
  523.23987    25
 1249.97626    25
  452.89969    25
  705.70784    25
  879.88425    25
> 
> 
