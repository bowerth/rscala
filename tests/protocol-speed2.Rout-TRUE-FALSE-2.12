> heap.maximum <- "3G"
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # TRUE # FALSE
> 
> library(help="rscala")

		Information on package ‘rscala’

Description:

Package:              rscala
Type:                 Package
Title:                Bi-Directional Interface Between 'R' and 'Scala'
                      with Callbacks
Version:              2.3.5-554
Date:                 2017-09-26
Authors@R:            person(given="David
                      B.",family="Dahl",role=c("aut","cre"),email="dahl@stat.byu.edu")
URL:                  https://github.com/dbdahl/rscala
BugReports:           https://github.com/dbdahl/rscala/issues
Imports:              utils
SystemRequirements:   Scala (>= 2.10)
Description:          The 'Scala' <http://www.scala-lang.org/>
                      interpreter is embedded in 'R' and callbacks to
                      'R' from the embedded interpreter are supported.
                      Conversely, the 'R' interpreter is embedded in
                      'Scala'. 'Scala' versions in the 2.10.x, 2.11.x,
                      and 2.12.x series are supported.
License:              GPL (>= 2) | BSD_3_clause + file LICENSE
VignetteBuilder:      knitr
Suggests:             knitr, microbenchmark, rJava, xtable
NeedsCompilation:     no
Packaged:             2017-09-26 16:52:18 UTC; dahl
Author:               David B. Dahl [aut, cre]
Maintainer:           David B. Dahl <dahl@stat.byu.edu>
Built:                R 3.4.1; ; 2017-09-26 17:35:39 UTC; unix

Index:

%~%                     Execute Code, Set Values, and Get Values in a
                        Scala Interpreter
close.ScalaInterpreter
                        Closes the Resources of a Scala Interpreter
print.ScalaInterpreter
                        String Representation of a Scala Interpreter,
                        Reference, or Function
rscala-package          Bi-Directional Interface Between R and Scala
                        with Callbacks
scala                   Create an Instance of an Embedded Scala
                        Interpreter
scalaSettings           Settings of the Scala Interpreter
strintrplt              String Interpolation with Arbitrary R Code

Further information is available in the following vignettes in
directory ‘/UShare/dahl/local/R/packages/rscala/doc’:

article: Integration of R and Scala Using rscala (source, pdf)

> 
> func0a <- function(x=matrix(0.0,nrow=10000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1a <- function(x=matrix(0L,nrow=20000,ncol=300)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func1b <- function(x=matrix(0L,nrow=200,ncol=300)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func2a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x'
+ }
> 
> func2b <- function(x=integer(60000)) {  # 0.228 MB
+   s %!% 'x'
+ }
> 
> func3a <- function(x=integer(6000000)) {  # 22.8 MB
+   s %!% 'x.length'
+ }
> 
> func4a <- function(x=integer(0)) {  # 0.228 MB
+   s %!% 'new Array[Int](6000000)'
+ }
> 
> s$a <- 1:6000000
> invisible(s$a)
> rng <- s$.scala.util.Random$new()
> invisible(sapply(1:1000,function(i) rng$nextGaussian()))   # Burn-in
> 
> library(microbenchmark)
> set.seed(13124)
> 
> microbenchmark(
+   rng$nextGaussian(),
+   unit="us",
+   times=2500)
Unit: microseconds
               expr     min      lq     mean  median       uq      max neval
 rng$nextGaussian() 412.345 761.574 1415.419 977.163 1087.231 427388.1  2500
> 
> microbenchmark(
+   rng$nextGaussian(),
+   func0a(),
+   func1a(),
+   func1b(),
+   func2a(),
+   func2b(),
+   func3a(),
+   func4a(),
+   s$a <- 1:6000000,
+   s$a,
+   unit="ms",
+   times=25)
Unit: milliseconds
               expr        min         lq       mean     median         uq
 rng$nextGaussian()   0.481882   0.764652   1.817015   0.821618   1.116870
           func0a() 269.395640 387.783584 481.483569 480.472564 549.458473
           func1a() 243.980460 325.025966 552.229990 479.377139 667.751360
           func1b()   2.431082   3.594929   4.684992   4.584472   5.121620
           func2a() 112.610074 161.817745 260.860210 203.592007 297.220925
           func2b()   1.724790   2.441557  41.948796   3.166388   3.812673
           func3a()  43.532725  66.434772 138.678531  74.690400 129.689525
           func4a()  78.465117  93.252958 158.324244 117.699158 153.797819
     s$a <- 1:6e+06 145.713468 211.708746 403.024086 420.612524 480.976724
                s$a 134.879700 178.884635 306.661187 227.776148 403.758364
        max neval
   20.63676    25
 1030.61315    25
 1438.16189    25
   10.65829    25
  870.77992    25
  893.58553    25
  949.64967    25
  874.95905    25
 1199.73226    25
  871.10481    25
> 
> 
