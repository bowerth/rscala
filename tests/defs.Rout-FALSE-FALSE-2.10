> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # FALSE # FALSE
> 
> 
> ####
> 
> 
> rng1 <- s %.~% "new scala.util.Random"
> rng1$nextDouble()
[1] 0.3787113
> 
> s$r1 <- rng1
> rng2 <- s$r1
> rng2$nextDouble()
[1] 0.8606813
> 
> rng3 <- s$.scala.util.Random$new()
> rng3$nextDouble()
[1] 0.6314094
> 
> s$r3 <- rng3
> rng4 <- s$r3
> rng4$nextDouble()
[1] 0.39046
> 
> 
> 
> ####
> 
> 
> see <- "David"
> mkFunc1 <- function() {
+   see <- "B."
+   x <- "Milly"
+   print(environment())
+   r <- function(x1="Mack",x2="Bob") s %!% '
+     x1+" "+x2+" "+R.getS0("see")
+   '
+   r
+ }
> y1 <- mkFunc1()
<environment: 0x3da7b00>
> identical(y1("Lisa","Dahl"),"Lisa Dahl B.")
[1] TRUE
> 
> 
> mkFunc2 <- function() {
+   see <- "MMMM."
+   x <- "Milly"
+   r <- function(x="Mack",y="Bob") s %.!% '
+       x+" "+y+" "+R.getS0("see")
+   '
+   r
+ }
> y2 <- mkFunc2()
> identical(y2("Lisa","Dahl")$toString(),"Lisa Dahl MMMM.")
[1] TRUE
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 336511 18.0     592000 31.7   460000 24.6
Vcells 625397  4.8    1214044  9.3  1043743  8.0
> 
> 
> 
> func1 <- function() {
+   see <- "Knudsen"
+   y1("Lisa","Dahl")
+ }
> identical(func1(),"Lisa Dahl B.")
[1] TRUE
> 
> 
> ####
> 
> 
> # Realistic timing
> system.time({
+   e <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+   rscala:::scalaOptimize(e)
+ })
   user  system elapsed 
  0.000   0.000   0.313 
> 
> # Taking advantage of caching
> system.time({
+   f <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+   rscala:::scalaOptimize(f)
+ })
   user  system elapsed 
  0.000   0.000   0.002 
> 
> ####
> 
> nextDouble <- function(rng=s$null("scala.util.Random")) s %!% "rng.nextDouble()"
> 
> mkRNG1 <- function() s %.!% 'new scala.util.Random()'
> mkRNG2 <- function() s %.~% 'new scala.util.Random()'
> 
> rng1 <- mkRNG1()
> rng2 <- mkRNG2()
> 
> rng1$nextInt(10L)
[1] 0
> rng2$nextInt(10L)
[1] 5
> 
> str <- rng1$toString(.AS.REFERENCE=TRUE)
> str$length()
[1] 26
> 
> nd1 <- function() s %!% 'R.cached("@{toString(rng1)}").asInstanceOf[@{rng1[[\'type\']]}].nextDouble()'
> nd1b <- rscala:::scalaOptimize(nd1)
> nd2 <- function() s %!% '@{rng2}.nextDouble()'
> nd2b <- rscala:::scalaOptimize(nd2)
> 
> library("microbenchmark")
> 
> microbenchmark(
+   runif(1),
+   rng1$nextDouble(),
+   rng2$nextDouble(),
+   nd1(),
+   nd1b(),
+   nd2(),
+   nd2b(),
+   times=500
+ )
Unit: microseconds
              expr      min        lq       mean    median        uq        max
          runif(1)    1.762   10.2690   13.96279   14.8535   16.7075    277.122
 rng1$nextDouble()  361.681  684.5215 1255.61264  771.8895  853.3095 118544.025
 rng2$nextDouble()  338.184  648.0460 1942.39549  707.5170  769.1710 423126.479
             nd1() 1524.093 2565.4865 3772.57452 2765.6125 2992.6780  70738.234
            nd1b()  323.129  556.4250  898.07293  619.1125  675.6190  36734.343
             nd2() 1366.476 2396.9640 3292.28470 2547.0840 2762.6765  32828.727
            nd2b()  271.335  542.5330 1103.88382  594.7190  641.7635  81100.005
 neval
   500
   500
   500
   500
   500
   500
   500
> 
> ####
> 
> f <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %!% '2*x'
+ }
> 
> f(4)
[1] 8
> tryCatch(f(-3), error=function(e) e)
<simpleError in f(-3): 'x' must be positive>
> f(0)
[1] 20
> 
> g <- rscala:::scalaOptimize(f)
> g(4)
[1] 8
> g(-3)     ## Note that no error because R code as been optimized away!
[1] -6
> g(0)      ## And we don't get the special case when x==0.
[1] 0
> 
> h <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %~% '2*R.getD0("x")'
+ }
> 
> h(4)
[1] 8
> tryCatch(h(-3), error=function(e) e)
<simpleError in h(-3): 'x' must be positive>
> h(0)
[1] 20
> 
> microbenchmark(
+   f(4),
+   g(4),
+   h(4),        # h is *slow* and it has the memory leak inherent in Scala's REPL.
+   times=100)
Unit: microseconds
 expr       min         lq       mean     median          uq       max neval
 f(4)  1698.428  2366.4590   3812.057  2624.9475   2844.0870  28983.08   100
 g(4)   360.568   721.3245   1382.761   803.4575    918.7885  14235.84   100
 h(4) 39561.381 70187.2675 109035.155 87538.6820 143824.5780 271564.63   100
> 
> microbenchmark(
+   f(4),        
+   g(4),        # g is faster, but you lose the checking and special behavior.
+   times=1000)
Unit: microseconds
 expr      min       lq     mean    median        uq      max neval
 f(4) 1343.007 1966.630 2885.505 2449.2830 2702.1585 87694.46  1000
 g(4)  361.654  592.192 1078.140  733.8805  856.1435 51342.60  1000
> 
> 
> 
> 
> ####
> 
> s$.scala.util.Random$nextDouble()
[1] 0.2797758
> s$'.Array[Int]'$new(5L)
[1] 0 0 0 0 0
> 
> ####
> 
> s$a <- 1:10
> a <- s$.a
> a$apply(3L)
[1] 4
> 
> s$.scala.util.Random$nextDouble()
[1] 0.8556364
> s$.scala.util.Random$nextDouble()
[1] 0.2705904
> 
> s %@% 'import scala.util.Random'
> s$.Random$nextDouble()
[1] 0.1635337
> 
> a <- function() s %!% 'Random.nextDouble'
> a()
[1] 0.5006451
> 
> a <- s$.scala.util.Random
> a$nextDouble()
[1] 0.7245089
> 
> b <- ( function() s %!% 'scala.util.Random' )()
> b$nextDouble()
[1] 0.2756546
> 
> microbenchmark(
+   a$nextDouble(),
+   b$nextDouble(),
+   times=1000
+   )
Unit: microseconds
           expr     min       lq     mean   median       uq      max neval
 a$nextDouble() 275.474 384.2975 681.1464 571.2785 632.4785 70172.76  1000
 b$nextDouble() 293.361 434.4495 659.1173 604.2255 666.7780 11197.18  1000
>   
> 
> ####
> 
> f <- function(x=NULL, wantNull=TRUE) s %.!% '
+   val r = R.getReference(x)
+   if ( wantNull ) null else r
+ '
> 
> a <- f(1:10, FALSE)
> a$name()
[1] "AkxIYpGc"
> 
> g <- function(func=NULL,y=scalaNull("PersistentReference")) s %!% '
+   R.invoke(func,y)
+ '
> 
> g(print, a)
 [1]  1  2  3  4  5  6  7  8  9 10
> 
> 
> ####
> 
> f <- function(x=scalaNull("(Int,Int)")) s %!% 'x._1 + x._2'
> g <- s %~% "(300,400)"
> f(g)
[1] 700
> f(s %.~% "(30,40)")
[1] 70
> 
> f2 <- function() s %~% 'println("Yes")'
> f2()
> capture.output(f2())
character(0)
> 
> a <- s %.~% "(300,234)"
> f1 <- function(x=scalaNull("(Int,Int)"),y=numeric()) s %!% 'x._1 + x._2 + y.sum'
> f1(a,c(2,3,4,6))
[1] 549
> 
> f1 <- function(x=scalaNull("(Int,Int)"),y=scalaNull("Array[Double]")) s %!% 'x._1 + x._2 + y.sum'
> b <- s %.~% "Array[Double](2,3,4,5)"
> f1(a,b)
[1] 548
> 
> ####
> 
> (function() s %!% 'println("Yes")')()
> (function() s %!% '0')()
[1] 0
> (function() s %!% 'null')()
> 
> ####
> 
> tryCatch((function() s %!% 'a+b')(),error = function(e) e)
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((function() s %!% 'a+')(),error = function(e) e)
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((function() s %!% 'import org.asdfad')(),error = function(e) {e})
<simpleError in scalaEval(interpreter, snippet, workspace): Error in evaluation.>
> tryCatch((function() s %!% 'throw new RuntimeException()')(),error = function(e) {e})
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Invocation error.>
> s %~% "5+6"   # Everything's still okay!
[1] 11
> 
> 
