> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # FALSE
> 
> 
> ####
> 
> 
> rng1 <- s %.~% "new scala.util.Random"
> rng1$nextDouble()
[1] 0.9317175
> 
> s$r1 <- rng1
> rng2 <- s$r1
> rng2$nextDouble()
[1] 0.009830036
> 
> rng3 <- s$.scala.util.Random$new()
> rng3$nextDouble()
[1] 0.8141255
> 
> s$r3 <- rng3
> rng4 <- s$r3
> rng4$nextDouble()
[1] 0.7686435
> 
> f <- rng4$nextDouble(.EVALUATE=FALSE)
> f()
[1] 0.4217223
> 
> 
> ####
> 
> 
> see <- "David"
> mkFunc1 <- function() {
+   see <- "B."
+   x <- "Milly"
+   print(environment())
+   r <- function(x1="Mack",x2="Bob") s %!% '
+     x1+" "+x2+" "+R.getS0("see")
+   '
+   r
+ }
> y1 <- mkFunc1()
<environment: 0x29b0148>
> identical(y1("Lisa","Dahl"),"Lisa Dahl B.")
[1] TRUE
> 
> 
> mkFunc2 <- function() {
+   see <- "MMMM."
+   x <- "Milly"
+   r <- function(x="Mack",y="Bob") s %.!% '
+       x+" "+y+" "+R.getS0("see")
+   '
+   r
+ }
> y2 <- mkFunc2()
> identical(y2("Lisa","Dahl")$toString(),"Lisa Dahl MMMM.")
[1] TRUE
> gc()
         used (Mb) gc trigger (Mb) max used (Mb)
Ncells 335637 18.0     592000 31.7   460000 24.6
Vcells 625990  4.8    1213829  9.3  1034403  7.9
> 
> 
> 
> func1 <- function() {
+   see <- "Knudsen"
+   y1("Lisa","Dahl")
+ }
> identical(func1(),"Lisa Dahl B.")
[1] TRUE
> 
> 
> ####
> 
> 
> # Realistic timing
> system.time({
+   e <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+ })
   user  system elapsed 
      0       0       0 
> 
> # Taking advantage of caching
> system.time({
+   f <- function(x=0,y=4L,name="dog") s %!% '
+     name + " " + ( x + y )
+   '
+ })
   user  system elapsed 
      0       0       0 
> 
> ####
> 
> nextDouble <- function(rng=s$null("scala.util.Random")) s %!% "rng.nextDouble()"
> 
> mkRNG1 <- function() s %.!% 'new scala.util.Random()'
> mkRNG2 <- function() s %.~% 'new scala.util.Random()'
> 
> rng1 <- mkRNG1()
> rng2 <- mkRNG2()
> 
> rng1$nextInt(10L)
[1] 6
> rng2$nextInt(10L)
[1] 0
> 
> str <- rng1$toString(.AS.REFERENCE=TRUE)
> str$length()
[1] 25
> 
> nd0 <- rng1$nextDouble(.EVALUATE=FALSE)
> nd1 <- function() s %!% 'R.cached("@{toString(rng1)}").asInstanceOf[@{rng1[[\'type\']]}].nextDouble()'
> nd2 <- function() s %!% '@{rng2}.nextDouble()'
> 
> library("microbenchmark")
> 
> microbenchmark(
+   runif(1),
+   rng1$nextDouble(),
+   rng2$nextDouble(),
+   nd0(),
+   nd1(),
+   nd2(),
+   times=500
+ )
Unit: microseconds
              expr     min        lq       mean   median       uq        max
          runif(1)   1.920    8.6125   13.08579   14.763   16.588    133.592
 rng1$nextDouble() 508.924  977.0440 2532.54100 1097.122 1267.499  71235.866
 rng2$nextDouble() 497.434  963.1895 3253.81207 1057.996 1222.649 424402.958
             nd0() 322.913  616.3190 1653.23660  681.421  776.583  45765.741
             nd1() 723.607 1378.2015 4459.94062 1551.642 1893.082 298994.110
             nd2() 603.294 1166.7225 3137.11530 1304.620 1514.546 105223.515
 neval
   500
   500
   500
   500
   500
   500
> 
> ####
> 
> f <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %!% '2*x'
+ }
> 
> f(4)
[1] 8
> tryCatch(f(-3), error=function(e) e)
<simpleError in f(-3): 'x' must be positive>
> f(0)
[1] 20
> 
> h <- function(x=4) {
+   if ( x < 0 ) stop("'x' must be positive")
+   if ( x == 0 ) x <- 10
+   s %~% '2*R.getD0("x")'
+ }
> 
> h(4)
[1] 8
> tryCatch(h(-3), error=function(e) e)
<simpleError in h(-3): 'x' must be positive>
> h(0)
[1] 20
> 
> microbenchmark(
+   f(4),
+   h(4),        # h is *slow* and it has the memory leak inherent in Scala's REPL.
+   times=100)
Unit: microseconds
 expr       min        lq       mean     median         uq       max neval
 f(4)   655.634  1276.598   3516.431   1507.908   1737.868  53572.12   100
 h(4) 38205.305 99366.038 142058.202 128921.163 169586.576 370627.87   100
> 
> 
> 
> 
> ####
> 
> s$.scala.util.Random$nextDouble()
[1] 0.09345079
> m <- s$.scala.util.Random$new(342L,.EVALUATE=FALSE)
> m(23436)$nextDouble()
[1] 0.8011135
> m(63502)$nextDouble()
[1] 0.1435077
> m(93222)$nextDouble()
[1] 0.4889048
> m(93222)$nextDouble()
[1] 0.4889048
> 
> n <- m(5)$nextDouble(.EVALUATE=FALSE)
> n()
[1] 0.7305199
> n()
[1] 0.08825841
> n()
[1] 0.4889045
> 
> s$'.Array[Int]'$new(5L)
[1] 0 0 0 0 0
> 
> ####
> 
> s$a <- 1:10
> a <- s$.a
> a$apply(3L)
[1] 4
> 
> s$.scala.util.Random$nextDouble()
[1] 0.4513659
> s$.scala.util.Random$nextDouble()
[1] 0.3352773
> 
> s %@% 'import scala.util.Random'
> s$.Random$nextDouble()
[1] 0.5476482
> 
> a <- function() s %!% 'Random.nextDouble'
> a()
[1] 0.4562152
> 
> a <- s$.scala.util.Random
> a$nextDouble()
[1] 0.284908
> 
> b <- ( function() s %!% 'scala.util.Random' )()
> b$nextDouble()
[1] 0.7265439
> 
> microbenchmark(
+   a$nextDouble(),
+   b$nextDouble(),
+   times=1000
+   )
Unit: microseconds
           expr     min       lq     mean   median       uq      max neval
 a$nextDouble() 495.962 801.6920 2390.683 1003.661 1148.333 85079.69  1000
 b$nextDouble() 507.052 820.9665 1980.685 1051.242 1191.302 64331.11  1000
>   
> 
> ####
> 
> f <- function(x, wantNull=TRUE) s %.!% '
+   val r = R.getReference(x)
+   if ( wantNull ) null else r
+ '
> 
> a <- f(II(1:10), FALSE)
> a$name()
[1] "ORx3d7SJ"
> 
> g <- function(func, y=scalaNull("PersistentReference")) s %!% '
+   R.invoke(func,y)
+ '
> 
> g(II(print), a)
 [1]  1  2  3  4  5  6  7  8  9 10
attr(,"class")
[1] "ScalaAsIs"
> 
> 
> ####
> 
> f <- function(x=scalaNull("(Int,Int)")) s %!% 'x._1 + x._2'
> g <- s %~% "(300,400)"
> f(g)
[1] 700
> f(s %.~% "(30,40)")
[1] 70
> 
> f2 <- function() s %~% 'println("Yes")'
> f2()
Yes
> capture.output(f2())
[1] "Yes"
> 
> a <- s %.~% "(300,234)"
> f1 <- function(x=scalaNull("(Int,Int)"),y=numeric()) s %!% 'x._1 + x._2 + y.sum'
> f1(a,c(2,3,4,6))
[1] 549
> 
> f1 <- function(x=scalaNull("(Int,Int)"),y=scalaNull("Array[Double]")) s %!% 'x._1 + x._2 + y.sum'
> b <- s %.~% "Array[Double](2,3,4,5)"
> f1(a,b)
[1] 548
> 
> ####
> 
> (function() s %!% 'println("Yes")')()
Yes
> (function() s %!% '0')()
[1] 0
> (function() s %!% 'null')()
> 
> ####
> 
> tryCatch((function() s %!% 'a+b')(),error = function(e) e)
<console>:12: error: not found: value b
              a+b
                ^
<simpleError in scalaDef(interpreter, snippet, NA): Problem defining function.>
> tryCatch((function() s %!% 'a+')(),error = function(e) e)
<console>:12: error: missing arguments for method + in class StringAdd;
follow this method with `_' if you want to treat it as a partially applied function
              a+
               ^
<simpleError in scalaDef(interpreter, snippet, NA): Problem defining function.>
> tryCatch((function() s %!% 'import org.asdfad')(),error = function(e) {e})
<console>:11: error: object asdfad is not a member of package org
              import org.asdfad
                     ^
<simpleError in scalaDef(interpreter, snippet, NA): Problem defining function.>
> tryCatch((function() s %!% 'throw new RuntimeException()')(),error = function(e) {e})
java.lang.reflect.InvocationTargetException
	at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.server.ScalaServer.doInvoke(ScalaServer.scala:113)
	at org.ddahl.rscala.server.ScalaServer.org$ddahl$rscala$server$ScalaServer$$heart(ScalaServer.scala:415)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply$mcV$sp(ScalaServer.scala:434)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:434)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1$$anonfun$apply$mcV$sp$1.apply(ScalaServer.scala:434)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.Console$.withErr(Console.scala:167)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1.apply$mcV$sp(ScalaServer.scala:433)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:433)
	at org.ddahl.rscala.server.ScalaServer$$anonfun$run$1.apply(ScalaServer.scala:433)
	at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
	at scala.Console$.withOut(Console.scala:126)
	at org.ddahl.rscala.server.ScalaServer.run(ScalaServer.scala:432)
	at org.ddahl.rscala.server.Main$delayedInit$body.apply(Main.scala:5)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:40)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.App$$anonfun$main$1.apply(App.scala:71)
	at scala.collection.immutable.List.foreach(List.scala:318)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:32)
	at scala.App$class.main(App.scala:71)
	at org.ddahl.rscala.server.Main$.main(Main.scala:3)
	at org.ddahl.rscala.server.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.tools.nsc.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:139)
	at scala.tools.nsc.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:71)
	at scala.tools.nsc.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:139)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:28)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:45)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:35)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:45)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:74)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:96)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:105)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.RuntimeException
	at $line320.$read$$iw$$iw$$anonfun$1.apply(<console>:11)
	at $line320.$read$$iw$$iw$$anonfun$1.apply(<console>:10)
	... 43 more
java.lang.reflect.InvocationTargetException
java.lang.RuntimeException
<simpleError in scalaDef(interpreter, snippet, NA): Problem invoking function.>
> s %~% "5+6"   # Everything's still okay!
[1] 11
> 
> 
