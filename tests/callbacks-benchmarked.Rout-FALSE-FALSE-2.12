> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     75.498    105.000     654.0955     172.243     191.342
 doit1(rnorm(10)) 768269.366 905415.036 1047967.4147 1040632.681 1128570.955
 doit2(rnorm(10)) 449887.411 467897.753  585789.9899  509775.080  662292.631
 doit3(rnorm(10))   3704.351   4378.704    6826.2675    4950.069    5624.315
 doit4(rnorm(10))   1896.352   2328.005    4326.1451    3355.242    6103.806
        max neval
    5198.03    10
 1404614.79    10
  858496.81    10
   21272.84    10
   10709.54    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median        uq       max
 doit0(rnorm(10))   30.373   59.112   86.00665   73.270   96.5845  6663.957
 doit3(rnorm(10)) 2142.618 2561.166 3883.83130 3637.305 4177.8025 79702.003
 doit4(rnorm(10)) 1071.862 1318.686 2052.25991 1921.506 2267.8880 35610.896
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4596  200.4604  200.5389  200.4835  200.4948  200.7961
 doit1(rnorm(10)) 1067.0000 1197.1304 1233.0845 1255.1440 1283.1236 1363.0247
 doit2(rnorm(10))  645.4305  673.6988  769.1576  769.7385  849.9584  906.9616
 doit3(rnorm(10))  203.6124  205.1600  208.3551  208.7349  209.8256  214.4424
 doit4(rnorm(10))  202.9204  203.2884  203.7867  203.6355  204.3408  204.7484
 neval
     5
     5
     5
     5
     5
> 
> 
