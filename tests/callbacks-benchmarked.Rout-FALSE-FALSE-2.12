> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     70.689    111.403     648.4816     167.799     193.781
 doit1(rnorm(10)) 823164.464 915686.971 1167069.9700 1095643.055 1368944.165
 doit2(rnorm(10)) 346243.083 503852.114  666340.5107  563394.754  885604.246
 doit3(rnorm(10))   3155.173   3484.081    5887.5406    4301.258    6030.434
 doit4(rnorm(10))   1321.719   1696.044    4816.5626    2422.282    3365.876
         max neval
    5191.462    10
 1883885.839    10
 1116621.479    10
   19816.036    10
   21942.305    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   31.136   63.1185   92.40141   77.216  110.3265  5981.829
 doit3(rnorm(10)) 2182.415 2746.9030 4258.79080 3969.006 4529.1295 72979.588
 doit4(rnorm(10)) 1028.434 1413.2445 2401.41871 2091.797 2500.7730 76988.442
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr       min        lq      mean    median        uq       max
 doit0(rnorm(10))  200.4510  200.4647  200.4869  200.4837  200.4950  200.5400
 doit1(rnorm(10)) 1173.3120 1232.6970 1345.6205 1266.2117 1393.2087 1662.6731
 doit2(rnorm(10))  743.1168  747.4322  865.6071  861.3233  884.5957 1091.5677
 doit3(rnorm(10))  204.4026  208.7050  214.3268  214.1121  215.0700  229.3440
 doit4(rnorm(10))  202.8805  203.6461  206.3354  203.6789  206.7138  214.7578
 neval
     5
     5
     5
     5
     5
> 
> 
