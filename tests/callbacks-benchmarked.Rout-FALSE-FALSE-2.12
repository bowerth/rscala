> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     59.942    104.528    537.7407    147.5545    169.539
 doit1(rnorm(10)) 370819.874 434221.142 645748.2147 627542.4475 780967.170
 doit2(rnorm(10)) 211206.448 281390.797 407915.9764 327770.7405 666394.427
 doit3(rnorm(10))   3331.764   4200.919   4727.8970   4510.9725   4910.061
 doit4(rnorm(10))   1047.502   1656.794   5416.5348   2101.1390   2484.488
         max neval
    4217.365    10
 1029419.832    10
  678217.290    10
    7981.243    10
   34511.102    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq       max
 doit0(rnorm(10))   27.983   50.0675   69.21917   61.9825   84.183  1454.125
 doit3(rnorm(10)) 1794.057 2143.8980 3061.05104 2740.8855 3481.042 74641.024
 doit4(rnorm(10))  828.629 1039.8640 1474.31490 1197.8675 1764.867 11949.791
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4486 200.4608 200.5044 200.4630 200.4690 200.6808     5
 doit1(rnorm(10)) 541.1516 554.2103 595.1670 598.3122 620.0234 662.1377     5
 doit2(rnorm(10)) 427.6969 461.8722 489.3914 504.2578 520.6317 532.4982     5
 doit3(rnorm(10)) 203.3005 203.5706 203.7678 203.7582 203.9584 204.2515     5
 doit4(rnorm(10)) 202.4051 202.5935 202.8032 202.6820 202.7054 203.6300     5
> 
> 
