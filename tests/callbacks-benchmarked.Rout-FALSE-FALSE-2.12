> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     80.421    120.632     498.4204     159.361     208.540
 doit1(rnorm(10)) 847817.725 952888.536 1072653.6812 1008137.769 1261705.923
 doit2(rnorm(10)) 494694.625 525485.501  692960.5661  695415.829  812276.343
 doit3(rnorm(10))   3878.863   4357.681    9002.5846    4791.880    5739.529
 doit4(rnorm(10))   1661.421   2821.354    6916.0119    3669.665    5149.454
         max neval
    3623.321    10
 1352711.609    10
  914405.539    10
   33122.964    10
   35364.614    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median       uq        max
 doit0(rnorm(10))   29.454   56.4045   73.96329   69.743   85.254   2428.533
 doit3(rnorm(10)) 1996.183 2855.5330 4038.08272 3330.807 4005.934 102675.702
 doit4(rnorm(10))  940.129 1578.3710 2242.98227 1846.092 2254.493  41902.790
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4048 200.4582  201.9252  200.4766  202.4545  205.8321
 doit1(rnorm(10)) 975.3381 992.7644 1126.9267 1108.5986 1221.1642 1336.7682
 doit2(rnorm(10)) 630.4468 635.6504  686.5003  672.8332  709.2693  784.3018
 doit3(rnorm(10)) 204.3969 204.5231  209.7295  205.8498  208.6476  225.2304
 doit4(rnorm(10)) 202.4016 203.3147  204.7039  203.7089  204.6783  209.4159
 neval
     5
     5
     5
     5
     5
> 
> 
