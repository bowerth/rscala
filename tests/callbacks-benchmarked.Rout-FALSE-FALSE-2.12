> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr         min          lq         mean       median          uq
 doit0(rnorm(10))      64.056     101.647     627.7569     145.9485     168.518
 doit1(rnorm(10)) 1134047.761 1321025.164 1822071.1193 1761012.7020 2190741.553
 doit2(rnorm(10))  550757.785  767756.768  985440.2662  870272.2585 1330499.118
 doit3(rnorm(10))    4118.952    4751.481   14416.6159    4904.6260    8780.929
 doit4(rnorm(10))    2343.233    2489.694    7227.3547    4018.5560    4990.839
         max neval
    5109.376    10
 3016299.174    10
 1624771.321    10
   93082.228    10
   36328.619    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq        max
 doit0(rnorm(10))   30.762   62.9215   86.34572   82.0505  109.266    284.586
 doit3(rnorm(10)) 2202.767 3331.6295 5314.05030 4140.5925 4507.273 111442.303
 doit4(rnorm(10)) 1046.161 1858.8550 3236.93249 2336.9410 2538.770  57695.853
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min        lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4001  200.4033  200.7651  200.4278  200.4427  202.1518
 doit1(rnorm(10)) 977.9925 1206.5490 1239.8034 1266.6128 1293.7668 1454.0960
 doit2(rnorm(10)) 661.7891  733.7394  801.3999  816.3924  830.9836  964.0949
 doit3(rnorm(10)) 203.6727  204.2304  204.9711  204.7837  204.8753  207.2935
 doit4(rnorm(10)) 202.5700  202.6477  202.9249  203.0025  203.1452  203.2590
 neval
     5
     5
     5
     5
     5
> 
> 
