> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean       median          uq
 doit0(rnorm(10))     77.217     78.674     556.5968     141.5295     174.425
 doit1(rnorm(10)) 701253.438 881121.231 1133554.7415 1085758.6810 1332720.423
 doit2(rnorm(10)) 402277.812 437694.107  622037.9040  473732.2510  874266.815
 doit3(rnorm(10))   2993.704   4604.398    9686.9461    5173.3615    7088.355
 doit4(rnorm(10))   1300.571   2106.400    3224.6663    2670.7455    3324.938
         max neval
    4389.555    10
 1928927.580    10
 1048374.618    10
   37010.033    10
    9047.306    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean    median        uq      max
 doit0(rnorm(10))   31.181   56.865  108.8654   70.5495   98.0035 27944.46
 doit3(rnorm(10)) 2199.323 2486.154 3755.3134 3744.8310 4175.1440 81408.10
 doit4(rnorm(10)) 1020.918 1287.024 2184.0311 2044.2345 2347.7750 60738.28
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10)) 200.3871 200.4365  201.2772  200.5379  202.4602  202.5645
 doit1(rnorm(10)) 977.8493 979.9768 1135.4116 1002.3933 1240.2780 1476.5608
 doit2(rnorm(10)) 571.2733 602.5131  673.6026  689.7255  706.0789  798.4224
 doit3(rnorm(10)) 203.6361 204.7229  205.1179  204.8001  204.9951  207.4354
 doit4(rnorm(10)) 202.3494 202.3543  203.8924  202.4827  203.3629  208.9125
 neval
     5
     5
     5
     5
     5
> 
> 
