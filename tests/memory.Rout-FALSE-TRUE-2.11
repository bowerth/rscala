> heap.maximum <- "192M"
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> 
> tryCatch(a <- s$".Array[Double]"$new(20000000L),error=function(e) e)
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.server.ScalaServer.doInvoke(ScalaServer.scala:113)
	at org.ddahl.rscala.server.ScalaServer.org$ddahl$rscala$server$ScalaServer$$heart(ScalaServer.scala:415)
	at org.ddahl.rscala.server.ScalaServer.run(ScalaServer.scala:442)
	at org.ddahl.rscala.server.Main$.delayedEndpoint$org$ddahl$rscala$server$Main$1(Main.scala:5)
	at org.ddahl.rscala.server.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.server.Main$.main(Main.scala:3)
	at org.ddahl.rscala.server.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
	at scala.tools.nsc.ObjectRunner$.runAndCatch(ObjectRunner.scala:39)
	at scala.tools.nsc.MainGenericRunner.runTarget$1(MainGenericRunner.scala:65)
	at scala.tools.nsc.MainGenericRunner.run$1(MainGenericRunner.scala:87)
	at scala.tools.nsc.MainGenericRunner.process(MainGenericRunner.scala:98)
	at scala.tools.nsc.MainGenericRunner$.main(MainGenericRunner.scala:103)
	at scala.tools.nsc.MainGenericRunner.main(MainGenericRunner.scala)
Caused by: java.lang.OutOfMemoryError: Java heap space
	at $line6.$read$$iw$$iw$$anonfun$1.apply(<console>:16)
	at $line6.$read$$iw$$iw$$anonfun$1.apply(<console>:14)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.ddahl.rscala.server.ScalaServer.doInvoke(ScalaServer.scala:113)
	at org.ddahl.rscala.server.ScalaServer.org$ddahl$rscala$server$ScalaServer$$heart(ScalaServer.scala:415)
	at org.ddahl.rscala.server.ScalaServer.run(ScalaServer.scala:442)
	at org.ddahl.rscala.server.Main$.delayedEndpoint$org$ddahl$rscala$server$Main$1(Main.scala:5)
	at org.ddahl.rscala.server.Main$delayedInit$body.apply(Main.scala:3)
	at scala.Function0$class.apply$mcV$sp(Function0.scala:34)
	at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.App$$anonfun$main$1.apply(App.scala:76)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at scala.collection.generic.TraversableForwarder$class.foreach(TraversableForwarder.scala:35)
	at scala.App$class.main(App.scala:76)
	at org.ddahl.rscala.server.Main$.main(Main.scala:3)
	at org.ddahl.rscala.server.Main.main(Main.scala)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at scala.reflect.internal.util.ScalaClassLoader$$anonfun$run$1.apply(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$class.asContext(ScalaClassLoader.scala:31)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.asContext(ScalaClassLoader.scala:101)
	at scala.reflect.internal.util.ScalaClassLoader$class.run(ScalaClassLoader.scala:70)
	at scala.reflect.internal.util.ScalaClassLoader$URLClassLoader.run(ScalaClassLoader.scala:101)
	at scala.tools.nsc.CommonRunner$class.run(ObjectRunner.scala:22)
	at scala.tools.nsc.ObjectRunner$.run(ObjectRunner.scala:39)
	at scala.tools.nsc.CommonRunner$class.runAndCatch(ObjectRunner.scala:29)
java.lang.reflect.InvocationTargetException
java.lang.OutOfMemoryError: Java heap space
<simpleError in f(..., .NBACK = 2): Problem invoking function.>
> close(s)
> cat("----\n")
----
> 
> heap.maximum <- "386M"
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(20000000L),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="64M")
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> tryCatch(a <- s$".Array[Double]"$new(20000000L),error=function(e) e)
> close(s)
> cat("----\n")
----
> 
> options(rscala.heap.maximum="128M")
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # TRUE
> for ( i in 1:2000 ) {
+   a <- s$".Array[Double]"$new(200000L)  # No memory problems
+ }
> 
> tryCatch({
+ for ( i in 1:2000 ) {
+   s %~% "new Array[Double](200000)"           # Memory problems
+ }
+ },error=function(e) e)
java.lang.OutOfMemoryError: GC overhead limit exceeded
	at scala.runtime.ObjectRef.create(ObjectRef.java:22)
	at scala.collection.immutable.List.flatMap(List.scala:336)
	at scala.tools.nsc.transform.SpecializeTypes$$anonfun$23.apply(SpecializeTypes.scala:783)
	at scala.tools.nsc.transform.SpecializeTypes$$anonfun$23.apply(SpecializeTypes.scala:781)
	at scala.collection.immutable.List.flatMap(List.scala:338)
	at scala.tools.nsc.transform.SpecializeTypes.specializeClass(SpecializeTypes.scala:781)
	at scala.tools.nsc.transform.SpecializeTypes.transformInfo(SpecializeTypes.scala:1196)
	at scala.tools.nsc.transform.InfoTransform$Phase$$anon$1.transform(InfoTransform.scala:38)
	at scala.reflect.internal.Symbols$Symbol.rawInfo(Symbols.scala:1625)
	at scala.reflect.internal.Symbols$Symbol.info(Symbols.scala:1545)
	at scala.tools.nsc.backend.ScalaPrimitives.addPrimitives(ScalaPrimitives.scala:445)
	at scala.tools.nsc.backend.ScalaPrimitives.init(ScalaPrimitives.scala:233)
	at scala.tools.nsc.backend.icode.GenICode$ICodePhase.run(GenICode.scala:52)
	at scala.tools.nsc.Global$Run.compileUnitsInternal(Global.scala:1528)
	at scala.tools.nsc.Global$Run.compileUnits(Global.scala:1513)
	at scala.tools.nsc.Global$Run.compileSources(Global.scala:1508)
	at scala.tools.nsc.interpreter.IMain.compileSourcesKeepingRun(IMain.scala:442)
	at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.compileAndSaveRun(IMain.scala:862)
	at scala.tools.nsc.interpreter.IMain$ReadEvalPrint.compile(IMain.scala:820)
	at scala.tools.nsc.interpreter.IMain$Request.compile$lzycompute(IMain.scala:1009)
	at scala.tools.nsc.interpreter.IMain$Request.compile(IMain.scala:1004)
	at scala.tools.nsc.interpreter.IMain.compile(IMain.scala:586)
	at scala.tools.nsc.interpreter.IMain.interpret(IMain.scala:574)
	at scala.tools.nsc.interpreter.IMain.interpretSynthetic(IMain.scala:573)
	at scala.tools.nsc.interpreter.ExprTyper$class.asExpr$1(ExprTyper.scala:26)
	at scala.tools.nsc.interpreter.ExprTyper$$anonfun$symbolOfLine$1.apply(ExprTyper.scala:51)
	at scala.tools.nsc.interpreter.ExprTyper$$anonfun$symbolOfLine$1.apply(ExprTyper.scala:51)
	at scala.tools.nsc.interpreter.IMain.beSilentDuring(IMain.scala:227)
	at scala.tools.nsc.interpreter.ExprTyper$class.symbolOfLine(ExprTyper.scala:51)
	at scala.tools.nsc.interpreter.IMain$exprTyper$.symbolOfLine(IMain.scala:1179)
	at scala.tools.nsc.interpreter.IMain.symbolOfLine(IMain.scala:1205)
	at org.ddahl.rscala.server.ScalaServer.typeOfTerm(ScalaServer.scala:37)
java.lang.OutOfMemoryError: GC overhead limit exceeded
<simpleError in doTryCatch(return(expr), name, parentenv, handler): Exception thrown.>
> 
> 
> 
