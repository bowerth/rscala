> jars <- c("commons-math3-3.2.jar","shallot.jar")
> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # FALSE # FALSE
> 
> tryCatch(s %~% 'new org.apache.commons.math3.random.EmpiricalDistribution()',error=function(e) e)   # Scala 2.11.x class loader is weird.  This line avoid subsequent problems.
ScalaInterpreterReference... res1: org.apache.commons.math3.random.EmpiricalDistribution
> 
> 
> rscala:::scalap(s,"org.apache.commons.math3.random.RandomDataGenerator")
> s$.org.apache.commons.math3.random.RandomDataGenerator
ScalaInterpreterItem for org.apache.commons.math3.random.RandomDataGenerator
> rdg <- s$.org.apache.commons.math3.random.RandomDataGenerator$new()
> 
> rdg$reSeed(39234L)
> 
> library(microbenchmark)
> options(width=120)
> microbenchmark(rdg$nextExponential(4),times=1000L)
Unit: microseconds
                   expr     min      lq     mean   median       uq      max neval
 rdg$nextExponential(4) 474.362 781.127 1685.903 1097.142 1298.691 419984.5  1000
> microbenchmark(rdg$nextExponential(4),times=1000L)
Unit: microseconds
                   expr     min      lq     mean   median       uq      max neval
 rdg$nextExponential(4) 572.927 935.654 1401.101 1091.948 1244.418 37024.71  1000
> microbenchmark(rdg$nextExponential(4),times=1000L)
Unit: microseconds
                   expr     min       lq     mean   median       uq      max neval
 rdg$nextExponential(4) 484.143 966.0115 1453.073 1051.213 1150.454 38969.54  1000
> 
> s$.org.ddahl.shallot.parameter.Mass
ScalaInterpreterItem for org.ddahl.shallot.parameter.Mass
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> s %~% "3+4"
[1] 7
> 
> mass <- s$.org.ddahl.shallot.parameter.Mass$apply(3.4)
> massFactory1 <- s$.org.ddahl.shallot.parameter.Mass$factory(mass)
> massFactory2 <- s$.org.ddahl.shallot.parameter.Mass$factory(3.0)
> massFactory3 <- s$.org.ddahl.shallot.parameter.Mass$factory(1.0,3.0,rdg)
> massFactory3$apply()$logValue()
[1] -0.6478535
> massFactory3$apply()$logValue()
[1] -4.182517
> massFactory3$apply()$logValue()
[1] -1.252531
> 
> 
> 
> s %@% '
+ class Bob {
+ 
+   val a = 3.0
+   var b = 4.0
+ 
+   def sum(c: Int) = { a + b + c }
+ 
+ }
+ '
> 
> d <- s$.Bob$new()
> d[['type']]                           # Note the weird 'iw$' prepended to 'Bob'
[1] "iw$Bob"
> tryCatch(d$b(),error=function(e) e)   # Doesn't work
<simpleError in d$b(): Problem invoking function.>
> 
> d[['type']] <- "Bob"     # Cast it to be 'Bob'
> d$b()                    # Now it does
[1] 4
> 
> d$sum(4L)
[1] 11
> d$sum(as.integer(4))                                   # Casting is needed here.
[1] 11
> 
> 
