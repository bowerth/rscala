> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     57.280     98.699    506.0459    135.528    188.387
 doit1(rnorm(10)) 393101.318 464719.111 625597.9094 588959.052 797168.797
 doit2(rnorm(10)) 174074.267 233567.702 412639.7695 340892.074 435829.769
 doit3(rnorm(10))   4284.082   4954.491   7980.9271   5529.464   6014.664
 doit4(rnorm(10))   2893.507   3049.796   7876.8290   5742.172  11005.721
         max neval
    3928.826    10
  890104.126    10
 1016022.928    10
   27123.873    10
   21736.548    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10))   31.570   64.615  109.1233   87.5885  110.0005  9270.189
 doit3(rnorm(10)) 2528.248 4104.809 6327.6480 4850.0210 5330.0010 86788.681
 doit4(rnorm(10)) 1475.636 2449.361 4332.2947 2936.8865 3306.0820 85752.360
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4101 200.4364 200.4337 200.4403 200.4407 200.4410     5
 doit1(rnorm(10)) 595.0992 643.9507 721.3217 665.4455 709.0192 993.0937     5
 doit2(rnorm(10)) 417.5591 439.4769 487.0379 493.4015 524.9083 559.8437     5
 doit3(rnorm(10)) 205.9473 206.3920 210.1177 210.8665 211.4151 215.9675     5
 doit4(rnorm(10)) 203.5204 203.8223 204.1381 204.1247 204.5555 204.6678     5
> 
> 
