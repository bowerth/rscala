> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     54.758    116.236    558.7842    138.2825    157.756
 doit1(rnorm(10)) 382194.742 447630.290 573346.9327 521911.2935 685386.548
 doit2(rnorm(10)) 172432.447 196138.977 306405.0429 216946.9035 500471.361
 doit3(rnorm(10))   4439.168   4711.679   8255.4627   6598.6620   8121.997
 doit4(rnorm(10))   2455.072   2876.987   3753.2563   3919.3970   4656.164
        max neval
   4479.677    10
 906987.916    10
 616608.524    10
  22833.043    10
   4990.052    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq        max
 doit0(rnorm(10))   28.523   55.829   84.22243   70.2555   97.695   2974.565
 doit3(rnorm(10)) 2221.564 2904.446 4939.82969 3736.9830 4544.220 120090.337
 doit4(rnorm(10)) 1208.330 1622.473 2932.60679 2163.1660 2744.580  51199.816
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4236 200.4293 200.4438 200.4361 200.4484 200.4818     5
 doit1(rnorm(10)) 573.6889 605.5913 634.1134 654.4073 667.2367 669.6425     5
 doit2(rnorm(10)) 436.7739 492.8617 574.1468 521.3035 548.9187 870.8762     5
 doit3(rnorm(10)) 204.1897 204.3268 215.8728 204.5836 212.9432 253.3209     5
 doit4(rnorm(10)) 203.0488 203.2132 204.7455 203.3334 204.8894 209.2424     5
> 
> 
