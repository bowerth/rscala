> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq       mean     median         uq
 doit0(rnorm(10))     59.728     84.072    572.024    149.318    159.090
 doit1(rnorm(10)) 300988.015 528530.903 627804.106 654103.030 717345.028
 doit2(rnorm(10)) 158807.815 256052.426 346723.220 278209.958 491985.309
 doit3(rnorm(10))   4928.859   5170.973   7170.976   6328.706   6685.665
 doit4(rnorm(10))   2576.337   3132.517   4314.411   3615.833   4387.362
        max neval
   4589.674    10
 813621.181    10
 686960.121    10
  13698.206    10
   8456.618    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean   median        uq        max
 doit0(rnorm(10))   31.238   60.996   86.55397   75.806  104.9605   2268.209
 doit3(rnorm(10)) 2463.771 3386.858 5973.35102 4573.425 5183.3875 157143.758
 doit4(rnorm(10)) 1295.606 2001.964 3816.58408 2819.913 3211.2410 125218.151
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4142 200.4444 200.7239 200.4674 200.5026 201.7909     5
 doit1(rnorm(10)) 466.3870 538.3699 561.8595 553.3166 595.5505 655.6737     5
 doit2(rnorm(10)) 387.4279 418.0429 436.6771 427.1022 457.9382 492.8744     5
 doit3(rnorm(10)) 205.3977 205.4593 208.2965 205.7098 210.9278 213.9880     5
 doit4(rnorm(10)) 203.7620 203.7980 231.7052 219.4385 236.0446 295.4828     5
> 
> 
