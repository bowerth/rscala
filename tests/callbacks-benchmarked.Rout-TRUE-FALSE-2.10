> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     63.731    115.335    656.5311    142.058    162.815
 doit1(rnorm(10)) 452487.890 501792.625 730730.1262 758765.792 867673.636
 doit2(rnorm(10)) 262178.100 314104.972 463486.2434 386706.334 462761.300
 doit3(rnorm(10))   5270.758   5477.581  12294.0211   7295.354  13340.746
 doit4(rnorm(10))   3384.573   3752.570  18298.7467   7803.501  18362.648
         max neval
    5373.589    10
 1010140.251    10
  985484.587    10
   38728.397    10
   86056.044    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10))   33.042   69.790  104.8513   96.3585  117.7605   7929.98
 doit3(rnorm(10)) 2501.624 4475.525 7447.4671 4984.2360 6311.6475  90094.34
 doit4(rnorm(10)) 1451.434 2625.278 4657.1057 3021.5435 3457.4750 123668.57
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.3898 200.4185 201.5990 200.4370 200.4372  206.3124     5
 doit1(rnorm(10)) 631.1503 694.6033 798.1382 714.5845 765.4447 1184.9080     5
 doit2(rnorm(10)) 442.8125 449.3331 468.6517 459.0669 465.6566  526.3896     5
 doit3(rnorm(10)) 204.4266 204.5508 206.1702 204.9085 205.9817  210.9835     5
 doit4(rnorm(10)) 203.0724 203.2309 205.8686 203.8012 203.8405  215.3982     5
> 
> 
