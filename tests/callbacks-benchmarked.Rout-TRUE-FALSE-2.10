> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq         mean      median          uq
 doit0(rnorm(10))     55.590    114.509     555.6027    159.5915     182.592
 doit1(rnorm(10)) 602716.496 705000.267 1010038.2691 994215.2505 1257511.343
 doit2(rnorm(10)) 229521.499 399583.685  625392.2463 563353.7475  780242.001
 doit3(rnorm(10))   4840.419   5305.690   10772.5175   7075.1000   14631.879
 doit4(rnorm(10))   2893.229   2967.781    7642.6959   4527.3420    7850.979
        max neval
    4322.93    10
 1507549.76    10
 1199888.89    10
   26682.92    10
   28579.33    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq     mean    median        uq        max
 doit0(rnorm(10))   33.004   70.5015  105.698  104.5975  120.6595   4172.497
 doit3(rnorm(10)) 2664.055 4627.9585 8688.804 5124.7395 8160.0345 129748.546
 doit4(rnorm(10)) 1496.707 2864.3610 5627.855 3136.7730 3661.1205 171966.507
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4141 200.4165 201.8883 200.4211 200.4587  207.7313     5
 doit1(rnorm(10)) 598.9868 629.2055 813.8911 652.5195 670.7580 1517.9857     5
 doit2(rnorm(10)) 526.4995 558.1382 589.3299 561.4516 618.0950  682.4654     5
 doit3(rnorm(10)) 205.3656 206.0307 211.6380 209.9541 210.2919  226.5478     5
 doit4(rnorm(10)) 203.8849 203.9331 209.7272 204.5419 216.6386  219.6371     5
> 
> 
