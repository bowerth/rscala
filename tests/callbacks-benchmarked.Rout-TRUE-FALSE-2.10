> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # TRUE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median         uq
 doit0(rnorm(10))     68.398    123.700    690.2088    164.745    189.585
 doit1(rnorm(10)) 306121.671 523548.372 682629.1052 722404.230 771517.489
 doit2(rnorm(10)) 231175.073 245533.126 372877.0393 292332.631 529011.013
 doit3(rnorm(10))   5333.602   5512.777   7978.1269   6531.895   9785.049
 doit4(rnorm(10))   3209.407   3346.276  11360.1884   5498.771  14467.614
         max neval
    5605.062    10
 1009248.218    10
  694340.649    10
   17365.983    10
   37854.569    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean   median       uq       max neval
 doit0(rnorm(10))   34.946   74.514  162.6636  104.731  131.251  17195.88  1000
 doit3(rnorm(10)) 2644.993 4813.074 9097.2518 5429.772 8854.826 117381.26  1000
 doit4(rnorm(10)) 1542.630 2868.503 5437.4744 3288.336 3822.858 120334.99  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4551 200.4665 200.4996 200.4834 200.5106  200.5826     5
 doit1(rnorm(10)) 618.9153 636.5266 858.3765 641.9341 662.2011 1732.3052     5
 doit2(rnorm(10)) 390.8239 481.7001 509.7884 542.1202 544.5419  589.7561     5
 doit3(rnorm(10)) 205.9044 206.3616 213.6871 206.9231 215.4275  233.8186     5
 doit4(rnorm(10)) 203.8624 204.3209 207.6407 208.4084 208.8882  212.7232     5
> 
> 
