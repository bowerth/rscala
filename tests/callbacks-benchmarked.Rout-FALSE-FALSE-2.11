> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     78.476    122.192    649.1179    159.972     193.507
 doit1(rnorm(10)) 402405.009 486464.455 765844.6939 713972.635 1024212.836
 doit2(rnorm(10)) 298317.481 315943.513 588810.1872 355864.050  800076.544
 doit3(rnorm(10))   2928.111   4241.149   5833.2297   4670.322    5089.665
 doit4(rnorm(10))   1738.285   2491.082   3017.4574   2675.507    2995.511
         max neval
    5169.448    10
 1316096.600    10
 1739617.575    10
   18495.240    10
    5751.349    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq       mean    median       uq       max
 doit0(rnorm(10))   30.164   66.188   93.24496   84.0775  109.587  3460.087
 doit3(rnorm(10)) 2124.464 3486.168 4784.41665 4104.8445 4521.211 76714.486
 doit4(rnorm(10)) 1047.014 1791.995 2734.09152 2204.3900 2511.976 70990.019
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10)) 200.4624 200.5128  200.6205  200.5261  200.5358  201.0654
 doit1(rnorm(10)) 871.3255 977.2786 1055.7809 1077.7235 1088.7875 1263.7892
 doit2(rnorm(10)) 605.3863 739.4717  765.4507  810.4144  831.7080  840.2734
 doit3(rnorm(10)) 204.5731 204.6001  207.1232  205.0352  208.3661  213.0412
 doit4(rnorm(10)) 203.2352 203.4734  205.2734  203.7273  203.8823  212.0490
 neval
     5
     5
     5
     5
     5
> 
> 
