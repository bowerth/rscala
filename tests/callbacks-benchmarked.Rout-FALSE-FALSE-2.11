> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # becker # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     71.689     89.142    543.0064     137.217     187.453
 doit1(rnorm(10)) 505347.443 582542.792 972864.3758 1066182.572 1198732.775
 doit2(rnorm(10)) 274203.344 357085.133 541702.6513  466544.274  748359.644
 doit3(rnorm(10))   3637.844   4192.828   6325.0052    5241.416    7886.555
 doit4(rnorm(10))   1628.740   2321.129   4692.6258    2682.338    3600.291
         max neval
    4265.223    10
 1409720.159    10
  985479.449    10
   14107.186    10
   19759.793    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   31.389   59.8515   81.79225   76.036  103.0655    220.27
 doit3(rnorm(10)) 2198.552 2655.4615 4945.34442 3933.291 4390.6640 678596.52
 doit4(rnorm(10)) 1064.365 1344.7010 2344.80985 2065.082 2409.1490  44039.21
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4392 200.4483 200.5305 200.4999 200.5095 200.7553     5
 doit1(rnorm(10)) 793.4552 828.6112 858.5165 834.3735 901.4081 934.7344     5
 doit2(rnorm(10)) 542.0173 567.5088 662.8907 598.0420 642.1765 964.7088     5
 doit3(rnorm(10)) 204.4408 204.5995 205.3750 204.7255 206.1444 206.9649     5
 doit4(rnorm(10)) 203.2233 203.3153 206.7004 204.2834 208.0410 214.6391     5
> 
> 
