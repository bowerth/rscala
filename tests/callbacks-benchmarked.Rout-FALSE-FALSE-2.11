> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # cochran # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean     median          uq
 doit0(rnorm(10))     62.976     76.389    552.2184    135.975     210.102
 doit1(rnorm(10)) 471537.221 671585.356 932234.7030 944341.746 1172460.935
 doit2(rnorm(10)) 264010.912 337174.992 560210.0191 482110.235  789510.402
 doit3(rnorm(10))   3436.780   4642.029   7098.9402   5692.759    7107.299
 doit4(rnorm(10))   1463.420   2219.088   3795.4577   3078.342    5254.556
         max neval
    4330.557    10
 1322037.436    10
 1044983.732    10
   18750.849    10
    8467.618    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq        max
 doit0(rnorm(10))   29.517   61.9795   81.54032   76.402  102.6305    185.967
 doit3(rnorm(10)) 2167.163 3096.3935 4365.34752 3922.954 4301.1315  73094.901
 doit4(rnorm(10)) 1060.687 1573.0915 2862.62239 2170.383 2451.9885 398524.858
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean   median        uq       max
 doit0(rnorm(10)) 200.4254 200.4514  200.4868 200.4655  200.4925  200.5994
 doit1(rnorm(10)) 928.5372 983.2606 1069.8231 986.1939 1125.6365 1325.4873
 doit2(rnorm(10)) 612.9865 691.6359  769.6506 760.7985  883.7306  899.1013
 doit3(rnorm(10)) 204.8812 205.1594  208.0775 206.8603  211.3472  212.1396
 doit4(rnorm(10)) 203.1146 203.1213  203.6473 203.2676  203.5955  205.1378
 neval
     5
     5
     5
     5
     5
> 
> 
