> source("common.R",print.eval=TRUE)
# R version 3.4.1 (2017-06-30) # carter # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median          uq
 doit0(rnorm(10))     83.432    109.970    409.5066    153.8685     181.013
 doit1(rnorm(10)) 419473.451 503232.876 857514.0672 891487.5255 1000804.641
 doit2(rnorm(10)) 270340.134 331102.351 464654.4366 409398.6220  549852.821
 doit3(rnorm(10))   4174.954   4657.257   7025.7426   5562.5735    8762.672
 doit4(rnorm(10))   2066.568   2157.496   3309.0491   2633.2110    2799.061
         max neval
    2851.577    10
 1603530.529    10
  809314.345    10
   15076.477    10
    7979.584    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean   median        uq       max
 doit0(rnorm(10))   31.579   60.0505   82.54237   75.493   96.7565  2250.308
 doit3(rnorm(10)) 2152.607 2917.2620 4748.94006 3930.629 4377.0690 73151.646
 doit4(rnorm(10)) 1068.316 1450.0280 2601.35969 2090.001 2419.2735 82455.068
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq       max neval
 doit0(rnorm(10)) 200.4757 200.5298 201.5799 200.5326 200.5935  205.7679     5
 doit1(rnorm(10)) 869.6920 988.9820 978.5989 995.0971 997.4426 1041.7808     5
 doit2(rnorm(10)) 593.9536 634.7424 674.5182 694.7053 701.7469  747.4427     5
 doit3(rnorm(10)) 204.3496 204.9487 207.6784 205.3109 211.3092  212.4736     5
 doit4(rnorm(10)) 203.3393 203.8465 208.2128 208.8820 209.8013  215.1951     5
> 
> 
