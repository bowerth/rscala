> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # becker # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- rscala:::scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min          lq         mean      median          uq
 doit0(rnorm(10))     57.771      99.810     601.1659     135.818     179.418
 doit1(rnorm(10)) 978977.969 1237994.567 1354313.7160 1361194.549 1446635.953
 doit2(rnorm(10)) 539048.878  578369.115  841751.0797  603393.101 1115040.466
 doit3(rnorm(10))   2897.014    4567.311   11411.4510    6249.627   12034.221
 doit4(rnorm(10))   2288.061    2447.893    6143.5934    3186.224    6239.167
         max neval
    4807.363    10
 1896734.331    10
 1657006.536    10
   42335.809    10
   18680.875    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min       lq      mean   median       uq       max neval
 doit0(rnorm(10))   31.597   59.505  110.0191   74.625   97.316  25674.08  1000
 doit3(rnorm(10)) 2092.934 3183.962 4888.2059 3869.165 4186.867 109461.82  1000
 doit4(rnorm(10)) 1103.368 1719.482 2672.7589 2090.137 2329.096  59537.19  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq      mean    median        uq       max
 doit0(rnorm(10)) 200.3889 200.4281  200.4352  200.4400  200.4560  200.4629
 doit1(rnorm(10)) 734.3772 975.4612 1092.0150 1030.5694 1308.0753 1411.5916
 doit2(rnorm(10)) 587.6924 710.2670  756.6525  779.4391  841.0387  864.8254
 doit3(rnorm(10)) 204.8239 204.8734  207.7245  207.6626  208.7840  212.4787
 doit4(rnorm(10)) 203.0912 208.9270  215.4063  209.1728  209.5820  246.2585
 neval
     5
     5
     5
     5
     5
> 
> 
