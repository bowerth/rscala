> source("common.R",print.eval=TRUE)
# R version 3.4.0 (2017-04-21) # rencher # FALSE # FALSE
> set.seed(924234)
> 
> 
> sleep.time <- 0
> f <- function(x) { Sys.sleep(sleep.time); mean(x) }
> g <- function(x) { Sys.sleep(sleep.time); sd(x) }
> 
> 
> 
> # Native R code implementation
> doit0 <- function(x) {
+   y <- 2*x
+   c(f(y),g(y))
+ }
> 
> doit0(rnorm(10))
[1] 0.1013462 1.4964630
> 
> 
> 
> # Single callback in interpreted code.
> doit1 <- function(x) {
+   s$x <- x
+   s %@% 'R.set("y",x.map(2*_))'
+   c(s %~% 'R.evalD0("f(y)")',
+     s %~% 'R.evalD0("g(y)")')
+ }
> 
> doit1(rnorm(10))
[1] 0.6360252 2.5355099
> 
> 
> 
> # Multiple callbacks in interpreted code.
> doit2 <- function(x) {
+   s$x <- x
+   s %~% '
+     R.set("y",x.map(2*_))
+     Array(R.evalD0("f(y)"),
+           R.evalD0("g(y)"))
+   '
+ }
> 
> doit2(rnorm(10))
[1] -0.163821  1.921544
> 
> 
> 
> 
> # Multiple callbacks in compiled code.
> doit3 <- function(x=numeric()) s %!% '
+   R.set("y",x.map(2*_))
+   Array(R.evalD0("f(y)"),
+         R.evalD0("g(y)"))
+ '
> 
> doit3(rnorm(10))
[1] 0.1105979 2.3994832
> 
> 
> 
> # Multiple callbacks in compiled code with optimization.
> doit4 <- scalaOptimize(doit3)
> 
> doit4(rnorm(10))
[1] -0.05390445  2.16063425
> 
> 
> 
> # Benchmarks
> 
> library(microbenchmark)
> 
> sleep.time <- 0
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=10
+ )
Unit: microseconds
             expr        min         lq        mean      median         uq
 doit0(rnorm(10))     69.874     91.303    637.3573    139.9215    200.846
 doit1(rnorm(10)) 514463.394 630609.930 822893.7031 817718.6070 899476.865
 doit2(rnorm(10)) 265130.368 366862.715 498552.1136 430501.4530 670891.970
 doit3(rnorm(10))   2404.023   3901.786   7981.1205   5460.8205   9030.638
 doit4(rnorm(10))   1128.141   1465.998   4083.9112   1750.2485   2012.002
         max neval
    5101.724    10
 1305936.518    10
  810008.367    10
   28097.320    10
   18330.359    10
> microbenchmark(
+   doit0(rnorm(10)),
+   #doit1(rnorm(10)),
+   #doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=1000
+ )
Unit: microseconds
             expr      min        lq       mean    median       uq       max
 doit0(rnorm(10))   26.670   52.6005   75.21718   66.3015   90.824  1683.861
 doit3(rnorm(10)) 1641.380 2403.7585 3566.64572 3062.9930 3606.955 82129.173
 doit4(rnorm(10))  868.124 1204.7110 1825.36472 1594.2785 1930.086 33312.925
 neval
  1000
  1000
  1000
> 
> 
> sleep.time <- 0.1
> microbenchmark(
+   doit0(rnorm(10)),
+   doit1(rnorm(10)),
+   doit2(rnorm(10)),
+   doit3(rnorm(10)),
+   doit4(rnorm(10)),
+   times=5
+ )
Unit: milliseconds
             expr      min       lq     mean   median       uq      max neval
 doit0(rnorm(10)) 200.4088 200.4529 201.5857 200.8977 201.7739 204.3950     5
 doit1(rnorm(10)) 696.7948 762.7347 812.6194 833.1927 854.1772 916.1976     5
 doit2(rnorm(10)) 517.4537 521.9576 610.6537 643.7338 665.3673 704.7559     5
 doit3(rnorm(10)) 204.1073 205.2983 210.0787 210.2462 214.1781 216.5636     5
 doit4(rnorm(10)) 202.6689 202.7301 202.8313 202.8473 202.9220 202.9883     5
> 
> 
